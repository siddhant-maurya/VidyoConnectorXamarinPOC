// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class LocalRenderer{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoLocalRenderer reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalRendererConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalRendererDestructNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererDisableNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererEnableFECCIconCustomLayoutNative(IntPtr r, Boolean enable);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalRendererEnableSelfViewCustomLayoutNative(IntPtr renderer, Boolean enable);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalRendererGetIdNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalRendererGetNameNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererIsPausedNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererIsSelectedTileControllingRemoteCameraNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalRendererPauseNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererPinParticipantNative(IntPtr r, IntPtr p, Boolean pin);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererRegisterPipEventListenerNative(IntPtr r, OnPipLocationChanged onPipLocationChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalRendererResumeNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetAllowContentMultiScreenNative(IntPtr r, Boolean allow, uint displayIndex);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetAllowPreviewMultiScreenNative(IntPtr r, Boolean allow, uint displayIndex);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetAnimationSpeedNative(IntPtr renderer, uint speedPercentage);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetBackgroundColorNative(IntPtr renderer, byte red, byte green, byte blue);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalRendererSetBorderStyleNative(IntPtr ct, [MarshalAs(UnmanagedType.I4)]LocalRendererBorderStyle style);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetCroppedNative(IntPtr renderer, Boolean cropped);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetMaxStreamsNative(IntPtr r, uint numStreams);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetMaxStreamsMultiScreenNative(IntPtr r, uint numStreams, uint displayIndex);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetParametersForHighDPIDeviceNative(IntPtr r, double pixelsPerInch, double viewingDistance, Boolean isTouchInputDevice);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetPipPositionNative(IntPtr r, [MarshalAs(UnmanagedType.I4)]LocalRendererPipPosition x, [MarshalAs(UnmanagedType.I4)]LocalRendererPipPosition y, Boolean lockPip);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetPositionNative(IntPtr r, int x, int y, uint width, uint height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetPriorityMultiScreenNative(IntPtr r, uint priority, uint displayIndex);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetRemoteWindowSharePinModeNative(IntPtr r, Boolean autoPin);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererSetTilesBackgroundColorNative(IntPtr renderer, byte red, byte green, byte blue);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererShowAudioMetersNative(IntPtr renderer, Boolean showMeters);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererShowDebugStatsNative(IntPtr renderer, Boolean showStats);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererShowLabelNative(IntPtr renderer, Boolean showLabel);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalRendererUnregisterPipEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoLocalRendererGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoLocalRendererSetUserDataNative(IntPtr obj, IntPtr userData);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnPipLocationChanged(IntPtr renderer, int x, int y, uint width, uint height, Boolean isExpanded);
		private static OnPipLocationChanged _mOnPipLocationChanged;
		public enum LocalRendererBorderStyle{
			LocalrendererborderstyleNone,
			LocalrendererborderstyleSame,
			LocalrendererborderstyleHighlight,
			LocalrendererborderstyleFlash
		}
		public enum LocalRendererPipPosition{
			LocalrendererpippositionMIN,
			LocalrendererpippositionCENTER,
			LocalrendererpippositionMAX
		}
		public enum LocalRendererViewStyle{
			LocalrendererviewstyleDefault,
			LocalrendererviewstyleTiles,
			LocalrendererviewstyleTilesWithRemoteCameraControlV2
		}
		public interface IRegisterPipEventListener{

			void OnPipLocationChanged(int x, int y, uint width, uint height, Boolean isExpanded);
		}
		private static IRegisterPipEventListener _mIRegisterPipEventListener;
		public LocalRenderer(IntPtr other){
			objPtr = VidyoLocalRendererConstructCopyNative(other);
			VidyoLocalRendererSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~LocalRenderer(){
			if(objPtr != IntPtr.Zero){
				VidyoLocalRendererSetUserDataNative(objPtr, IntPtr.Zero);
				VidyoLocalRendererDestructNative(objPtr);
			}
		}
		public Boolean Disable(){

			Boolean ret = VidyoLocalRendererDisableNative(objPtr);

			return ret;
		}
		public Boolean EnableFECCIconCustomLayout(Boolean enable){

			Boolean ret = VidyoLocalRendererEnableFECCIconCustomLayoutNative(objPtr, enable);

			return ret;
		}
		public void EnableSelfViewCustomLayout(Boolean enable){

			VidyoLocalRendererEnableSelfViewCustomLayoutNative(objPtr, enable);
		}
		public String GetId(){

			IntPtr ret = VidyoLocalRendererGetIdNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public String GetName(){

			IntPtr ret = VidyoLocalRendererGetNameNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public Boolean IsPaused(){

			Boolean ret = VidyoLocalRendererIsPausedNative(objPtr);

			return ret;
		}
		public Boolean IsSelectedTileControllingRemoteCamera(){

			Boolean ret = VidyoLocalRendererIsSelectedTileControllingRemoteCameraNative(objPtr);

			return ret;
		}
		public void Pause(){

			VidyoLocalRendererPauseNative(objPtr);
		}
		public Boolean PinParticipant(Participant p, Boolean pin){

			Boolean ret = VidyoLocalRendererPinParticipantNative(objPtr, (p != null) ? p.GetObjectPtr():IntPtr.Zero, pin);

			return ret;
		}
		public Boolean RegisterPipEventListener(IRegisterPipEventListener _iIRegisterPipEventListener){
			_mIRegisterPipEventListener = _iIRegisterPipEventListener;
			_mOnPipLocationChanged = OnPipLocationChangedDelegate;

			Boolean ret = VidyoLocalRendererRegisterPipEventListenerNative(objPtr, _mOnPipLocationChanged);

			return ret;
		}
		public void Resume(){

			VidyoLocalRendererResumeNative(objPtr);
		}
		public Boolean SetAllowContentMultiScreen(Boolean allow, uint displayIndex){

			Boolean ret = VidyoLocalRendererSetAllowContentMultiScreenNative(objPtr, allow, displayIndex);

			return ret;
		}
		public Boolean SetAllowPreviewMultiScreen(Boolean allow, uint displayIndex){

			Boolean ret = VidyoLocalRendererSetAllowPreviewMultiScreenNative(objPtr, allow, displayIndex);

			return ret;
		}
		public Boolean SetAnimationSpeed(uint speedPercentage){

			Boolean ret = VidyoLocalRendererSetAnimationSpeedNative(objPtr, speedPercentage);

			return ret;
		}
		public Boolean SetBackgroundColor(byte red, byte green, byte blue){

			Boolean ret = VidyoLocalRendererSetBackgroundColorNative(objPtr, red, green, blue);

			return ret;
		}
		public void SetBorderStyle(LocalRendererBorderStyle style){

			VidyoLocalRendererSetBorderStyleNative(objPtr, style);
		}
		public Boolean SetCropped(Boolean cropped){

			Boolean ret = VidyoLocalRendererSetCroppedNative(objPtr, cropped);

			return ret;
		}
		public Boolean SetMaxStreams(uint numStreams){

			Boolean ret = VidyoLocalRendererSetMaxStreamsNative(objPtr, numStreams);

			return ret;
		}
		public Boolean SetMaxStreamsMultiScreen(uint numStreams, uint displayIndex){

			Boolean ret = VidyoLocalRendererSetMaxStreamsMultiScreenNative(objPtr, numStreams, displayIndex);

			return ret;
		}
		public Boolean SetParametersForHighDPIDevice(double pixelsPerInch, double viewingDistance, Boolean isTouchInputDevice){

			Boolean ret = VidyoLocalRendererSetParametersForHighDPIDeviceNative(objPtr, pixelsPerInch, viewingDistance, isTouchInputDevice);

			return ret;
		}
		public Boolean SetPipPosition(LocalRendererPipPosition x, LocalRendererPipPosition y, Boolean lockPip){

			Boolean ret = VidyoLocalRendererSetPipPositionNative(objPtr, x, y, lockPip);

			return ret;
		}
		public Boolean SetPosition(int x, int y, uint width, uint height){

			Boolean ret = VidyoLocalRendererSetPositionNative(objPtr, x, y, width, height);

			return ret;
		}
		public Boolean SetPriorityMultiScreen(uint priority, uint displayIndex){

			Boolean ret = VidyoLocalRendererSetPriorityMultiScreenNative(objPtr, priority, displayIndex);

			return ret;
		}
		public Boolean SetRemoteWindowSharePinMode(Boolean autoPin){

			Boolean ret = VidyoLocalRendererSetRemoteWindowSharePinModeNative(objPtr, autoPin);

			return ret;
		}
		public Boolean SetTilesBackgroundColor(byte red, byte green, byte blue){

			Boolean ret = VidyoLocalRendererSetTilesBackgroundColorNative(objPtr, red, green, blue);

			return ret;
		}
		public Boolean ShowAudioMeters(Boolean showMeters){

			Boolean ret = VidyoLocalRendererShowAudioMetersNative(objPtr, showMeters);

			return ret;
		}
		public Boolean ShowDebugStats(Boolean showStats){

			Boolean ret = VidyoLocalRendererShowDebugStatsNative(objPtr, showStats);

			return ret;
		}
		public Boolean ShowLabel(Boolean showLabel){

			Boolean ret = VidyoLocalRendererShowLabelNative(objPtr, showLabel);

			return ret;
		}
		public Boolean UnregisterPipEventListener(){

			Boolean ret = VidyoLocalRendererUnregisterPipEventListenerNative(objPtr);

			return ret;
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnPipLocationChanged))]
#endif
		private static void OnPipLocationChangedDelegate(IntPtr renderer, int x, int y, uint width, uint height, Boolean isExpanded){
			if(_mIRegisterPipEventListener != null)
				_mIRegisterPipEventListener.OnPipLocationChanged(x, y, width, height, isExpanded);
		}
	};
}
