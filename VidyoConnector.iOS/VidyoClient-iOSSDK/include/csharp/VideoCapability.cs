// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class VideoCapability{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoVideoCapability reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern ulong VidyoVideoCapabilityGetheightNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoVideoCapabilityGetrangesNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoVideoCapabilityGetrangesArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoVideoCapabilityFreerangesArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern ulong VidyoVideoCapabilityGetwidthNative(IntPtr obj);

		public class VideoFrameIntervalRange{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoVideoFrameIntervalRange reference.
			public IntPtr GetObjectPtr(){
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoVideoFrameIntervalRangeGetformatsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoVideoFrameIntervalRangeGetformatsArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoVideoFrameIntervalRangeFreeformatsArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoVideoFrameIntervalRangeGetrangeNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern ulong VidyoVideoFrameIntervalRangeGetstepNative(IntPtr obj);

			public class TimeRange{
#if __IOS__
				const string importLib = "__Internal";
#else
				const string importLib = "libVidyoClient";
#endif
				private IntPtr objPtr; // opaque VidyoTimeRange reference.
				public IntPtr GetObjectPtr(){
					return objPtr;
				}
				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				private static extern ulong VidyoTimeRangeGetbeginNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				private static extern ulong VidyoTimeRangeGetendNative(IntPtr obj);

				public ulong begin;
				public ulong end;
				public TimeRange(IntPtr obj){
					objPtr = obj;

					begin = VidyoTimeRangeGetbeginNative(objPtr);
					end = VidyoTimeRangeGetendNative(objPtr);
				}
			};
			public List<MediaFormat> formats;
			public TimeRange range;
			public ulong step;
			public VideoFrameIntervalRange(IntPtr obj){
				objPtr = obj;

				List<MediaFormat> csFormats = new List<MediaFormat>();
				int nFormatsSize = 0;
				IntPtr nFormats = VidyoVideoFrameIntervalRangeGetformatsArrayNative(VidyoVideoFrameIntervalRangeGetformatsNative(objPtr), ref nFormatsSize);
				int nFormatsIndex = 0;
				while (nFormatsIndex < nFormatsSize) {
					csFormats.Add((MediaFormat)Marshal.ReadInt32(Marshal.ReadIntPtr(nFormats + (nFormatsIndex * Marshal.SizeOf(nFormats)))));
					nFormatsIndex++;
				}

				TimeRange csRange = new TimeRange(VidyoVideoFrameIntervalRangeGetrangeNative(objPtr));
				formats = csFormats;
				range = csRange;
				step = VidyoVideoFrameIntervalRangeGetstepNative(objPtr);
				VidyoVideoFrameIntervalRangeFreeformatsArrayNative(nFormats, nFormatsSize);
			}
		};
		public ulong height;
		public List<VideoFrameIntervalRange> ranges;
		public ulong width;
		public VideoCapability(IntPtr obj){
			objPtr = obj;

			List<VideoFrameIntervalRange> csRanges = new List<VideoFrameIntervalRange>();
			int nRangesSize = 0;
			IntPtr nRanges = VidyoVideoCapabilityGetrangesArrayNative(VidyoVideoCapabilityGetrangesNative(objPtr), ref nRangesSize);
			int nRangesIndex = 0;
			while (nRangesIndex < nRangesSize) {
				VideoFrameIntervalRange csTranges = new VideoFrameIntervalRange(Marshal.ReadIntPtr(nRanges + (nRangesIndex * Marshal.SizeOf(nRanges))));
				csRanges.Add(csTranges);
				nRangesIndex++;
			}

			height = VidyoVideoCapabilityGetheightNative(objPtr);
			ranges = csRanges;
			width = VidyoVideoCapabilityGetwidthNative(objPtr);
			VidyoVideoCapabilityFreerangesArrayNative(nRanges, nRangesSize);
		}
	};
}
