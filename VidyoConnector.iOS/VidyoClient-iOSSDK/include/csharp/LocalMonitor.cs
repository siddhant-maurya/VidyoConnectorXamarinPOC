// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class LocalMonitor{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoLocalMonitor reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern ulong VidyoLocalMonitorAddToLocalRendererNative(IntPtr m, IntPtr renderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorAddToRemoteRendererNative(IntPtr m, IntPtr remoteRenderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalMonitorClearConstraintsNative(IntPtr m);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalMonitorConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalMonitorDestructNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalMonitorGetIdNative(IntPtr m);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalMonitorGetNameNative(IntPtr m);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern LocalMonitorState VidyoLocalMonitorGetPreviewFrameDataUriNative(IntPtr m, ulong maxWidth, ulong maxHeight, IntPtr videoFrame);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorGetPreviewFrameDataUriAsyncNative(IntPtr m, ulong maxWidth, ulong maxHeight, OnPreviewDataUriComplete onComplete);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorIsPrimaryNative(IntPtr m);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalMonitorPrecludeApplicationNative(IntPtr m, IntPtr w);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalMonitorPrecludeWindowNative(IntPtr m, IntPtr w);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorRemoveFromLocalRendererNative(IntPtr m, IntPtr renderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorRemoveFromRemoteRendererNative(IntPtr m, IntPtr remoteRenderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorSetBoundsConstraintsNative(IntPtr m, ulong maxFrameInterval, ulong minFrameInterval, uint maxWidth, uint minWidth, uint maxHeight, uint minHeight);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorSetCaptureIntervalNative(IntPtr m, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorSetDiscreteConstraintsNative(IntPtr m, ulong maxFrameInterval, ulong minFrameInterval, uint width, uint height, double scaleFactor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorSetFrameIntervalNative(IntPtr m, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorSetLowLatencyProfileNative(IntPtr m, Boolean profile);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalMonitorSetPositionInLocalRendererNative(IntPtr m, IntPtr localRenderer, int x, int y, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoLocalMonitorGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoLocalMonitorSetUserDataNative(IntPtr obj, IntPtr userData);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnPreviewDataUriComplete(IntPtr m, IntPtr videoFrame, LocalMonitorState state);
		private static OnPreviewDataUriComplete _mOnPreviewDataUriComplete;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalMonitorOnPreviewDataUriCompleteGetvideoFrameCStr(IntPtr videoFrame);

		public enum LocalMonitorState{
			LocalmonitorstateOk,
			LocalmonitorstateNotVisible,
			LocalmonitorstateMiscError
		}
		public interface IGetPreviewFrameDataUriAsync{

			void OnPreviewDataUriComplete(String videoFrame, LocalMonitorState state);
		}
		private static IGetPreviewFrameDataUriAsync _mIGetPreviewFrameDataUriAsync;
		public LocalMonitor(IntPtr other){
			objPtr = VidyoLocalMonitorConstructCopyNative(other);
			VidyoLocalMonitorSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~LocalMonitor(){
			if(objPtr != IntPtr.Zero){
				VidyoLocalMonitorSetUserDataNative(objPtr, IntPtr.Zero);
				VidyoLocalMonitorDestructNative(objPtr);
			}
		}
		public ulong AddToLocalRenderer(LocalRenderer renderer){

			ulong ret = VidyoLocalMonitorAddToLocalRendererNative(objPtr, (renderer != null) ? renderer.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean AddToRemoteRenderer(RemoteRenderer remoteRenderer){

			Boolean ret = VidyoLocalMonitorAddToRemoteRendererNative(objPtr, (remoteRenderer != null) ? remoteRenderer.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public void ClearConstraints(){

			VidyoLocalMonitorClearConstraintsNative(objPtr);
		}
		public String GetId(){

			IntPtr ret = VidyoLocalMonitorGetIdNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public String GetName(){

			IntPtr ret = VidyoLocalMonitorGetNameNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public LocalMonitorState GetPreviewFrameDataUri(ulong maxWidth, ulong maxHeight, String videoFrame){

			IntPtr nVideoFrame = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(videoFrame ?? string.Empty);
			LocalMonitorState ret = VidyoLocalMonitorGetPreviewFrameDataUriNative(objPtr, maxWidth, maxHeight, nVideoFrame);
			Marshal.FreeHGlobal(nVideoFrame);

			return ret;
		}
		public Boolean GetPreviewFrameDataUriAsync(ulong maxWidth, ulong maxHeight, IGetPreviewFrameDataUriAsync _iIGetPreviewFrameDataUriAsync){
			_mIGetPreviewFrameDataUriAsync = _iIGetPreviewFrameDataUriAsync;
			_mOnPreviewDataUriComplete = OnPreviewDataUriCompleteDelegate;

			Boolean ret = VidyoLocalMonitorGetPreviewFrameDataUriAsyncNative(objPtr, maxWidth, maxHeight, _mOnPreviewDataUriComplete);

			return ret;
		}
		public Boolean IsPrimary(){

			Boolean ret = VidyoLocalMonitorIsPrimaryNative(objPtr);

			return ret;
		}
		public void PrecludeApplication(LocalWindowShare w){

			VidyoLocalMonitorPrecludeApplicationNative(objPtr, (w != null) ? w.GetObjectPtr():IntPtr.Zero);
		}
		public void PrecludeWindow(LocalWindowShare w){

			VidyoLocalMonitorPrecludeWindowNative(objPtr, (w != null) ? w.GetObjectPtr():IntPtr.Zero);
		}
		public Boolean RemoveFromLocalRenderer(LocalRenderer renderer){

			Boolean ret = VidyoLocalMonitorRemoveFromLocalRendererNative(objPtr, (renderer != null) ? renderer.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean RemoveFromRemoteRenderer(RemoteRenderer remoteRenderer){

			Boolean ret = VidyoLocalMonitorRemoveFromRemoteRendererNative(objPtr, (remoteRenderer != null) ? remoteRenderer.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SetBoundsConstraints(ulong maxFrameInterval, ulong minFrameInterval, uint maxWidth, uint minWidth, uint maxHeight, uint minHeight){

			Boolean ret = VidyoLocalMonitorSetBoundsConstraintsNative(objPtr, maxFrameInterval, minFrameInterval, maxWidth, minWidth, maxHeight, minHeight);

			return ret;
		}
		public Boolean SetCaptureInterval(ulong frameInterval){

			Boolean ret = VidyoLocalMonitorSetCaptureIntervalNative(objPtr, frameInterval);

			return ret;
		}
		public Boolean SetDiscreteConstraints(ulong maxFrameInterval, ulong minFrameInterval, uint width, uint height, double scaleFactor){

			Boolean ret = VidyoLocalMonitorSetDiscreteConstraintsNative(objPtr, maxFrameInterval, minFrameInterval, width, height, scaleFactor);

			return ret;
		}
		public Boolean SetFrameInterval(ulong frameInterval){

			Boolean ret = VidyoLocalMonitorSetFrameIntervalNative(objPtr, frameInterval);

			return ret;
		}
		public Boolean SetLowLatencyProfile(Boolean profile){

			Boolean ret = VidyoLocalMonitorSetLowLatencyProfileNative(objPtr, profile);

			return ret;
		}
		public Boolean SetPositionInLocalRenderer(LocalRenderer localRenderer, int x, int y, uint width, uint height, ulong frameInterval){

			Boolean ret = VidyoLocalMonitorSetPositionInLocalRendererNative(objPtr, (localRenderer != null) ? localRenderer.GetObjectPtr():IntPtr.Zero, x, y, width, height, frameInterval);

			return ret;
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnPreviewDataUriComplete))]
#endif
		private static void OnPreviewDataUriCompleteDelegate(IntPtr m, IntPtr videoFrame, LocalMonitorState state){
			IntPtr n_videoFrame = VidyoLocalMonitorOnPreviewDataUriCompleteGetvideoFrameCStr(videoFrame);

			if(_mIGetPreviewFrameDataUriAsync != null)
				_mIGetPreviewFrameDataUriAsync.OnPreviewDataUriComplete((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_videoFrame), state);
		}
	};
}
