// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class Room{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoRoom reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomAcceptIncomingNative(IntPtr r, OnIncomingEntered onIncomingEntered, OnIncomingExited onIncomingExited);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomAcquireMediaRouteNative(IntPtr r, OnMediaRouteAcquired onMediaRouteAcquired, OnMediaRouteAcquireFailed onMediaRouteAcquireFailed);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalCameraNative(IntPtr r, IntPtr localCamera, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalMicrophoneNative(IntPtr r, IntPtr localMicrophone, Boolean removeOthers, Boolean isAES);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalMonitorNative(IntPtr r, IntPtr localMonitor, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalRendererNative(IntPtr r, IntPtr localRenderer, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalSpeakerNative(IntPtr r, IntPtr localSpeaker, Boolean removeOthers, Boolean isAES);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddLocalWindowShareNative(IntPtr r, IntPtr localWindowShare, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomAddVirtualWindowShareNative(IntPtr r, IntPtr virtualWindowShare, Boolean removeOthers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomBootAllParticipantsNative(IntPtr r, IntPtr reason);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomBootParticipantNative(IntPtr r, IntPtr userId, IntPtr reason);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomCancelInviteNative(IntPtr r, IntPtr inviteeId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomDeleteNative(IntPtr r, OnDeleteResult onDeleteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomDestructNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomDisableMediaNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomEnableMediaNative(IntPtr r, OnMediaEnabled onMediaEnabled, OnMediaFailed onMediaFailed, OnMediaDisabled onMediaDisabled);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomEnterNative(IntPtr r, IntPtr password, OnEntered onEntered, OnExited onExited);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomGetHistoryNative(IntPtr r, uint numMessages, OnGetHistoryResults onGetHistoryResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomGetHistoryByIdNative(IntPtr r, long messageId, uint numMessagesBefore, uint numMessagesAfter, OnGetHistoryResults onGetHistoryResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomGetHistoryByTimeNative(IntPtr r, ulong time, uint numMessagesBefore, uint numMessagesAfter, OnGetHistoryResults onGetHistoryResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetIdNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomGetRoomPropertiesNative(IntPtr r, OnGetRoomPropertiesResult onGetRoomPropertiesResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalCamerasNative(IntPtr r, IntPtr cameras);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalMicrophonesNative(IntPtr r, IntPtr mics);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalMonitorsNative(IntPtr r, IntPtr monitors);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalRenderersNative(IntPtr r, IntPtr renderers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalSpeakersNative(IntPtr r, IntPtr speakers);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomGetSelectedLocalWindowSharesNative(IntPtr r, IntPtr windowShares);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomGetStatsNative(IntPtr r, IntPtr stats);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern RoomType VidyoRoomGetTypeNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomGetUserNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomHideStatisticsDialogNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomInviteNative(IntPtr r, IntPtr userId, IntPtr message, OnInviteResult onInviteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomInviteAllNative(IntPtr r, IntPtr message, OnInviteResult onInviteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomInviteNNative(IntPtr r, IntPtr userIds, IntPtr message, OnInviteResult onInviteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomLeaveNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomMessageSearchNative(IntPtr r, IntPtr searchText, uint index, uint pageSize, OnMessageSearchResults onMessageSearchResults);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRegisterMessageEventListenerNative(IntPtr r, OnMessageReceived onMessageReceived, OnMessageAcknowledged onMessageAcknowledged, OnMessageRead onMessageRead, OnMessageTypingIndication onMessageTypingIndication);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRegisterParticipantEventListenerNative(IntPtr r, OnParticipantJoined onParticipantJoined, OnParticipantLeft onParticipantLeft, OnDynamicParticipantChanged onDynamicParticipantChanged, OnLoudestParticipantChanged onLoudestParticipantChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRegisterPipEventListenerNative(IntPtr r, OnPipLocationChanged onPipLocationChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRegisterRecorderInCallEventListenerNative(IntPtr r, RecorderInCall onRecorderInCallChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRegisterResourceManagerEventListenerNative(IntPtr r, OnAvailableResourcesChanged onAvailableResourcesChanged, OnMaxRemoteSourcesChanged onMaxRemoteSourcesChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRegisterRoomPropertiesEventListenerNative(IntPtr r, OnRoomPropertiesChanged onRoomPropertiesChanged);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRegisterSubjectEventListenerNative(IntPtr r, OnSetSubject onSetSubject);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRegisterUnprocessedAudioEventListenerNative(IntPtr r, OnUnprocessedAudioSupportChanged onUnprocessedAudioSupportChanged, OnUnprocessedAudioStarted onUnprocessedAudioStarted);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRejectIncomingNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalCameraNative(IntPtr r, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalMicrophoneNative(IntPtr r, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalMonitorNative(IntPtr r, IntPtr localMonitor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalRendererNative(IntPtr r, IntPtr localRenderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalSpeakerNative(IntPtr r, IntPtr localSpeaker);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveLocalWindowShareNative(IntPtr r, IntPtr localWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomRemoveVirtualWindowShareNative(IntPtr r, IntPtr virtualWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomReportLocalParticipantOnJoinedNative(IntPtr r, Boolean reportLocalParticipant);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomRequestRoleChangeNative(IntPtr room, [MarshalAs(UnmanagedType.I4)]Role newRole, IntPtr auth, OnRequestRoleChangeResult onRequestRoleChangeResult, IntPtr requestId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomResizeStatisticsDialogNative(IntPtr r, int width, int height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSendMessageNative(IntPtr r, IntPtr message);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSendMessageAcknowledgedNative(IntPtr r, long messageId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSendMessageTypingIndicationNative(IntPtr r, [MarshalAs(UnmanagedType.I4)]ChatMessage.ChatMessageTypingIndication typingIndication);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSetDynamicGenerationPositionNative(IntPtr r, uint generation, int x, int y, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSetDynamicLocalRendererNative(IntPtr r, IntPtr renderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomSetFavoriteNative(IntPtr r, Boolean isFavorite, OnSetFavoriteResult onSetFavoriteResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSetMaxAudioSourcesNative(IntPtr r, uint count);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomSetMaxBitRateNative(IntPtr r, uint bitRate);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSetMaxVideoSourcesNative(IntPtr r, uint count);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSetRoomPropertiesNative(IntPtr r, IntPtr roomProperties, OnSetRoomPropertiesResult onSetRoomPropertiesResult);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomSetSubjectNative(IntPtr r, IntPtr subject);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoRoomShowStatisticsDialogNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomUnregisterMessageEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomUnregisterParticipantEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomUnregisterPipEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomUnregisterRecorderInCallEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomUnregisterResourceManagerEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomUnregisterRoomPropertiesEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomUnregisterSubjectEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoRoomUnregisterUnprocessedAudioEventListenerNative(IntPtr r);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoRoomGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoRoomSetUserDataNative(IntPtr obj, IntPtr userData);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnAvailableResourcesChanged(IntPtr room, uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive);
		private static OnAvailableResourcesChanged _mOnAvailableResourcesChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnDeleteResult(IntPtr room, RoomDeleteResult result);
		private static OnDeleteResult _mOnDeleteResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnDynamicParticipantChanged(IntPtr room, IntPtr selectedParticipants);
		private static OnDynamicParticipantChanged _mOnDynamicParticipantChanged;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnDynamicParticipantChangedGetselectedParticipantsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnDynamicParticipantChangedFreeselectedParticipantsArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnEntered(IntPtr room, RoomEnterResult result);
		private static OnEntered _mOnEntered;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnExited(IntPtr room, RoomExitReason reason);
		private static OnExited _mOnExited;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnGetHistoryResults(IntPtr room, IntPtr records, long historySize, RoomSearchResult result);
		private static OnGetHistoryResults _mOnGetHistoryResults;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnGetHistoryResultsGetrecordsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnGetHistoryResultsFreerecordsArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnGetRoomPropertiesResult(IntPtr room, RoomGetPropertiesResult result, IntPtr roomProperties);
		private static OnGetRoomPropertiesResult _mOnGetRoomPropertiesResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnIncomingEntered(IntPtr room, RoomEnterResult result);
		private static OnIncomingEntered _mOnIncomingEntered;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnIncomingExited(IntPtr room, RoomExitReason reason);
		private static OnIncomingExited _mOnIncomingExited;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnInviteResult(IntPtr room, IntPtr inviteeId, RoomInviteResult result);
		private static OnInviteResult _mOnInviteResult;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnInviteResultGetinviteeIdCStr(IntPtr inviteeId);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLoudestParticipantChanged(IntPtr room, IntPtr participant, Boolean isAudioOnly, Boolean isStatic);
		private static OnLoudestParticipantChanged _mOnLoudestParticipantChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMaxRemoteSourcesChanged(IntPtr room, uint maxRemoteSources);
		private static OnMaxRemoteSourcesChanged _mOnMaxRemoteSourcesChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaDisabled(IntPtr room, RoomMediaDisableReason reason);
		private static OnMediaDisabled _mOnMediaDisabled;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaEnabled(IntPtr room);
		private static OnMediaEnabled _mOnMediaEnabled;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaFailed(IntPtr room, RoomMediaFailReason reason);
		private static OnMediaFailed _mOnMediaFailed;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaRouteAcquireFailed(IntPtr room, RoomMediaFailReason reason);
		private static OnMediaRouteAcquireFailed _mOnMediaRouteAcquireFailed;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMediaRouteAcquired(IntPtr room);
		private static OnMediaRouteAcquired _mOnMediaRouteAcquired;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageAcknowledged(IntPtr room, IntPtr chatMessage);
		private static OnMessageAcknowledged _mOnMessageAcknowledged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageRead(IntPtr room, IntPtr participant, long messageId);
		private static OnMessageRead _mOnMessageRead;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageReceived(IntPtr room, IntPtr participant, IntPtr chatMessage);
		private static OnMessageReceived _mOnMessageReceived;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageSearchResults(IntPtr room, IntPtr searchText, IntPtr records, RoomSearchResult result);
		private static OnMessageSearchResults _mOnMessageSearchResults;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnMessageSearchResultsGetrecordsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnMessageSearchResultsFreerecordsArrayNative(IntPtr obj, int size);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnMessageTypingIndication(IntPtr room, IntPtr participant, ChatMessage.ChatMessageTypingIndication typingIndication);
		private static OnMessageTypingIndication _mOnMessageTypingIndication;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnParticipantJoined(IntPtr room, IntPtr participant);
		private static OnParticipantJoined _mOnParticipantJoined;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnParticipantLeft(IntPtr room, IntPtr participant);
		private static OnParticipantLeft _mOnParticipantLeft;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnPipLocationChanged(IntPtr room, int x, int y, uint width, uint height, Boolean isExpanded);
		private static OnPipLocationChanged _mOnPipLocationChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRequestRoleChangeResult(IntPtr room, RoomSetPropertiesResult result, IntPtr requestId);
		private static OnRequestRoleChangeResult _mOnRequestRoleChangeResult;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoRoomOnRequestRoleChangeResultGetrequestIdCStr(IntPtr requestId);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRoomPropertiesChanged(IntPtr room, IntPtr roomProperties);
		private static OnRoomPropertiesChanged _mOnRoomPropertiesChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnSetFavoriteResult(IntPtr room, Boolean isFavorite, RoomSetFavoriteResult result);
		private static OnSetFavoriteResult _mOnSetFavoriteResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnSetRoomPropertiesResult(IntPtr room, RoomSetPropertiesResult result);
		private static OnSetRoomPropertiesResult _mOnSetRoomPropertiesResult;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnSetSubject(IntPtr room, IntPtr subject);
		private static OnSetSubject _mOnSetSubject;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnUnprocessedAudioStarted(IntPtr room, Boolean started);
		private static OnUnprocessedAudioStarted _mOnUnprocessedAudioStarted;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnUnprocessedAudioSupportChanged(IntPtr room, Boolean supported);
		private static OnUnprocessedAudioSupportChanged _mOnUnprocessedAudioSupportChanged;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void RecorderInCall(IntPtr r, Boolean recorderInCall);
		private static RecorderInCall _mRecorderInCall;
		public enum Role{
			RoleModerator,
			RoleNone
		}
		public enum RoomDeleteResult{
			RoomdeleteresultOK,
			RoomdeleteresultNoResponse,
			RoomdeleteresultUnauthorized,
			RoomdeleteresultOutOfResources,
			RoomdeleteresultMiscError
		}
		public enum RoomEnterResult{
			RoomenterresultOK,
			RoomenterresultCancelled,
			RoomenterresultNoResponse,
			RoomenterresultInvalidPassword,
			RoomenterresultUnknownRoom,
			RoomenterresultRoomFull,
			RoomenterresultNotMember,
			RoomenterresultBanned,
			RoomenterresultMiscLocalError,
			RoomenterresultMiscRemoteError
		}
		public enum RoomExitReason{
			RoomexitreasonLeft,
			RoomexitreasonConnectionLost,
			RoomexitreasonSessionConnectionLost,
			RoomexitreasonMembershipConnectionLost,
			RoomexitreasonNoResponse,
			RoomexitreasonProtocolViolation,
			RoomexitreasonBooted,
			RoomexitreasonShuttingDown,
			RoomexitreasonMiscLocalError,
			RoomexitreasonMiscRemoteError
		}
		public enum RoomGetPropertiesResult{
			RoomgetpropertiesresultOK,
			RoomgetpropertiesresultNoResponse,
			RoomgetpropertiesresultUnauthorized,
			RoomgetpropertiesresultMiscLocalError,
			RoomgetpropertiesresultMiscRemoteError
		}
		public enum RoomInviteResult{
			RoominviteresultOK,
			RoominviteresultNoResponse,
			RoominviteresultUnauthorized,
			RoominviteresultOutOfResources,
			RoominviteresultMiscError,
			RoominviteresultUserIsOffline,
			RoominviteresultServerError
		}
		public enum RoomMediaDisableReason{
			RoommediadisablereasonDisabled,
			RoommediadisablereasonSignalingConnectionLost,
			RoommediadisablereasonMediaConnectionLost,
			RoommediadisablereasonBooted,
			RoommediadisablereasonSessionTerminated,
			RoommediadisablereasonServerShuttingDown,
			RoommediadisablereasonConferenceDestroyed,
			RoommediadisablereasonMiscLocalError,
			RoommediadisablereasonMiscRemoteError
		}
		public enum RoomMediaFailReason{
			RoommediafailreasonCancelled,
			RoommediafailreasonNoConference,
			RoommediafailreasonSignalingConnectionLost,
			RoommediafailreasonMediaConnectionLost,
			RoommediafailreasonNoResponse,
			RoommediafailreasonInvalidPassword,
			RoommediafailreasonRoomIsFull,
			RoommediafailreasonInvalidRoomKey,
			RoommediafailreasonRoomDisabled,
			RoommediafailreasonAllLinesInUse,
			RoommediafailreasonConnectionError,
			RoommediafailreasonInvalidRoom,
			RoommediafailreasonConferenceLocked,
			RoommediafailreasonSeatLicenseExpired,
			RoommediafailreasonNotLicensed,
			RoommediafailreasonRejected,
			RoommediafailreasonUnknownError,
			RoommediafailreasonMiscLocalError,
			RoommediafailreasonMiscRemoteError
		}
		public enum RoomProfileControlMode{
			RoomprofilecontrolmodeAlwaysOn,
			RoomprofilecontrolmodeAlwaysOff,
			RoomprofilecontrolmodeDefault
		}
		public enum RoomSearchResult{
			RoomsearchresultOK,
			RoomsearchresultNoRecords,
			RoomsearchresultNoResponse,
			RoomsearchresultUnauthorized,
			RoomsearchresultMiscLocalError,
			RoomsearchresultMiscRemoteError
		}
		public enum RoomSetFavoriteResult{
			RoomsetfavoriteresultOK,
			RoomsetfavoriteresultNoResponse,
			RoomsetfavoriteresultConflict,
			RoomsetfavoriteresultUnauthorized,
			RoomsetfavoriteresultNotAcceptable,
			RoomsetfavoriteresultNotAllowed,
			RoomsetfavoriteresultMiscLocalError,
			RoomsetfavoriteresultMiscRemoteError
		}
		public enum RoomSetPropertiesResult{
			RoomsetpropertiesresultOK,
			RoomsetpropertiesresultNoResponse,
			RoomsetpropertiesresultConflict,
			RoomsetpropertiesresultUnauthorized,
			RoomsetpropertiesresultNotAcceptable,
			RoomsetpropertiesresultNotAllowed,
			RoomsetpropertiesresultMiscLocalError,
			RoomsetpropertiesresultMiscRemoteError
		}
		public enum RoomState{
			RoomstateCreating,
			RoomstateCreated,
			RoomstateEntering,
			RoomstateEntered,
			RoomstateMediaRouteAcquiring,
			RoomstateMediaRouteAcquired,
			RoomstateMediaEnabling,
			RoomstateMediaEnabled,
			RoomstateMediaDisabling,
			RoomstateMediaDisabled,
			RoomstateExiting,
			RoomstateExited
		}
		public enum RoomType{
			RoomtypeUnknown,
			RoomtypeConversation,
			RoomtypeTopic,
			RoomtypeScheduled,
			RoomtypePersonal,
			RoomtypeTestCall,
			RoomtypeLegacy
		}
		public interface IAcceptIncoming{

			void OnIncomingEntered(RoomEnterResult result);
			void OnIncomingExited(RoomExitReason reason);
		}
		public interface IAcquireMediaRoute{

			void OnMediaRouteAcquired();
			void OnMediaRouteAcquireFailed(RoomMediaFailReason reason);
		}
		public interface IDelete{

			void OnDeleteResult(RoomDeleteResult result);
		}
		public interface IEnableMedia{

			void OnMediaEnabled();
			void OnMediaFailed(RoomMediaFailReason reason);
			void OnMediaDisabled(RoomMediaDisableReason reason);
		}
		public interface IEnter{

			void OnEntered(RoomEnterResult result);
			void OnExited(RoomExitReason reason);
		}
		public interface IGetHistory{

			void OnGetHistoryResults(List<ChatMessage> records, long historySize, RoomSearchResult result);
		}
		public interface IGetRoomProperties{

			void OnGetRoomPropertiesResult(RoomGetPropertiesResult result, RoomProperties roomProperties);
		}
		public interface IInvite{

			void OnInviteResult(String inviteeId, RoomInviteResult result);
		}
		public interface IMessageSearch{

			void OnMessageSearchResults(String searchText, List<ChatMessage> records, RoomSearchResult result);
		}
		public interface IRegisterMessageEventListener{

			void OnMessageReceived(Participant participant, ChatMessage chatMessage);
			void OnMessageAcknowledged(ChatMessage chatMessage);
			void OnMessageRead(Participant participant, long messageId);
			void OnMessageTypingIndication(Participant participant, ChatMessage.ChatMessageTypingIndication typingIndication);
		}
		public interface IRegisterParticipantEventListener{

			void OnParticipantJoined(Participant participant);
			void OnParticipantLeft(Participant participant);
			void OnDynamicParticipantChanged(List<Participant> selectedParticipants);
			void OnLoudestParticipantChanged(Participant participant, Boolean isAudioOnly, Boolean isStatic);
		}
		public interface IRegisterPipEventListener{

			void OnPipLocationChanged(int x, int y, uint width, uint height, Boolean isExpanded);
		}
		public interface IRegisterRecorderInCallEventListener{

			void RecorderInCall(Boolean recorderInCall);
		}
		public interface IRegisterResourceManagerEventListener{

			void OnAvailableResourcesChanged(uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive);
			void OnMaxRemoteSourcesChanged(uint maxRemoteSources);
		}
		public interface IRegisterRoomPropertiesEventListener{

			void OnRoomPropertiesChanged(RoomProperties roomProperties);
		}
		public interface IRegisterSubjectEventListener{

			void OnSetSubject(String subject);
		}
		public interface IRegisterUnprocessedAudioEventListener{

			void OnUnprocessedAudioSupportChanged(Boolean supported);
			void OnUnprocessedAudioStarted(Boolean started);
		}
		public interface IRequestRoleChange{

			void OnRequestRoleChangeResult(RoomSetPropertiesResult result, String requestId);
		}
		public interface ISetFavorite{

			void OnSetFavoriteResult(Boolean isFavorite, RoomSetFavoriteResult result);
		}
		public interface ISetRoomProperties{

			void OnSetRoomPropertiesResult(RoomSetPropertiesResult result);
		}
		public class GenerationDiff{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoGenerationDiff reference.
			public IntPtr GetObjectPtr(){
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern int VidyoGenerationDiffGetnewIndexNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern int VidyoGenerationDiffGetoldIndexNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoGenerationDiffGetparticipantNative(IntPtr obj);

			public int newIndex;
			public int oldIndex;
			public Participant participant;
			public GenerationDiff(IntPtr obj){
				objPtr = obj;

				Participant csParticipant = null;
				if(VidyoGenerationDiffGetparticipantNative(objPtr) != IntPtr.Zero){
					if(Participant.VidyoParticipantGetUserDataNative(VidyoGenerationDiffGetparticipantNative(objPtr)) == IntPtr.Zero)
						csParticipant = new Participant(VidyoGenerationDiffGetparticipantNative(objPtr));
					else{
						GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(VidyoGenerationDiffGetparticipantNative(objPtr));
						csParticipant = (Participant)objHandle.Target;
					}
				}
				newIndex = VidyoGenerationDiffGetnewIndexNative(objPtr);
				oldIndex = VidyoGenerationDiffGetoldIndexNative(objPtr);
				participant = csParticipant;
			}
		};
		public class RoleAuthentication{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoRoleAuthentication reference.
			public IntPtr GetObjectPtr(){
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoleAuthenticationGethasPassCodeNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoleAuthenticationGetpassCodeNative(IntPtr obj);

			public Boolean hasPassCode;
			public String passCode;
			public RoleAuthentication(IntPtr obj){
				objPtr = obj;

				hasPassCode = VidyoRoleAuthenticationGethasPassCodeNative(objPtr);
				passCode = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoleAuthenticationGetpassCodeNative(objPtr));
			}
		};
		public class RoomProperties{
#if __IOS__
			const string importLib = "__Internal";
#else
			const string importLib = "libVidyoClient";
#endif
			private IntPtr objPtr; // opaque VidyoRoomProperties reference.
			public IntPtr GetObjectPtr(){
				return objPtr;
			}
			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetadministratorsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetadministratorsArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreeadministratorsArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetcalendarInviteBodyNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetcalendarInviteHTMLBodyNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetcalendarInviteSubjectNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern ulong VidyoRoomPropertiesGetcreationTimeNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetdefaultProfileNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetdescriptionNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetdesignatedPresenterNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGethasCalendarInviteTextNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGethasPasswordNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisBroadcastingEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisLoggingEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisLoggingPausedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisLoggingSupportedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisMembersOnlyNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisModeratedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisPasswordProtectedNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisPublicNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisSecureNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern Boolean VidyoRoomPropertiesGetisWaitingRoomEnabledNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetlanguageNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetloggingLocationNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern uint VidyoRoomPropertiesGetmaxParticipantsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmembersNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmembersArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreemembersArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmoderatorUrlNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmoderatorsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetmoderatorsArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreemoderatorsArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetnameNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetoutcastsNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetoutcastsArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreeoutcastsArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetownersNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetownersArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreeownersArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetparticipantProfilesNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetparticipantProfilesArrayNative(IntPtr obj, ref int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern void VidyoRoomPropertiesFreeparticipantProfilesArrayNative(IntPtr obj, int size);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetpasswordNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetscheduleNative(IntPtr obj);

			[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
			private static extern IntPtr VidyoRoomPropertiesGetwebLinkNative(IntPtr obj);

			public class RoomParticipantProfile{
#if __IOS__
				const string importLib = "__Internal";
#else
				const string importLib = "libVidyoClient";
#endif
				private IntPtr objPtr; // opaque VidyoRoomParticipantProfile reference.
				public IntPtr GetObjectPtr(){
					return objPtr;
				}
				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern Room.RoomProfileControlMode VidyoRoomParticipantProfileGetcameraNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern Room.RoomProfileControlMode VidyoRoomParticipantProfileGetchatNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern Room.RoomProfileControlMode VidyoRoomParticipantProfileGetmicrophoneNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				private static extern IntPtr VidyoRoomParticipantProfileGetuserIdNative(IntPtr obj);

				[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
				[return: MarshalAs(UnmanagedType.I4)]
				private static extern Room.RoomProfileControlMode VidyoRoomParticipantProfileGetwindowShareNative(IntPtr obj);

				public Room.RoomProfileControlMode camera;
				public Room.RoomProfileControlMode chat;
				public Room.RoomProfileControlMode microphone;
				public String userId;
				public Room.RoomProfileControlMode windowShare;
				public RoomParticipantProfile(IntPtr obj){
					objPtr = obj;

					camera = VidyoRoomParticipantProfileGetcameraNative(objPtr);
					chat = VidyoRoomParticipantProfileGetchatNative(objPtr);
					microphone = VidyoRoomParticipantProfileGetmicrophoneNative(objPtr);
					userId = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomParticipantProfileGetuserIdNative(objPtr));
					windowShare = VidyoRoomParticipantProfileGetwindowShareNative(objPtr);
				}
			};
			public List<String> administrators;
			public String calendarInviteBody;
			public String calendarInviteHTMLBody;
			public String calendarInviteSubject;
			public ulong creationTime;
			public RoomParticipantProfile defaultProfile;
			public String description;
			public String designatedPresenter;
			public Boolean hasCalendarInviteText;
			public Boolean hasPassword;
			public Boolean isBroadcastingEnabled;
			public Boolean isLoggingEnabled;
			public Boolean isLoggingPaused;
			public Boolean isLoggingSupported;
			public Boolean isMembersOnly;
			public Boolean isModerated;
			public Boolean isPasswordProtected;
			public Boolean isPublic;
			public Boolean isSecure;
			public Boolean isWaitingRoomEnabled;
			public String language;
			public String loggingLocation;
			public uint maxParticipants;
			public List<String> members;
			public String moderatorUrl;
			public List<String> moderators;
			public String name;
			public List<String> outcasts;
			public List<String> owners;
			public List<RoomParticipantProfile> participantProfiles;
			public String password;
			public EventSchedule schedule;
			public String webLink;
			public RoomProperties(IntPtr obj){
				objPtr = obj;

				List<String> csAdministrators = new List<String>();
				int nAdministratorsSize = 0;
				IntPtr nAdministrators = VidyoRoomPropertiesGetadministratorsArrayNative(VidyoRoomPropertiesGetadministratorsNative(objPtr), ref nAdministratorsSize);
				int nAdministratorsIndex = 0;
				while (nAdministratorsIndex < nAdministratorsSize) {
					csAdministrators.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nAdministrators + (nAdministratorsIndex * Marshal.SizeOf(nAdministrators)))));
					nAdministratorsIndex++;
				}

				RoomParticipantProfile csDefaultProfile = new RoomParticipantProfile(VidyoRoomPropertiesGetdefaultProfileNative(objPtr));
				List<String> csMembers = new List<String>();
				int nMembersSize = 0;
				IntPtr nMembers = VidyoRoomPropertiesGetmembersArrayNative(VidyoRoomPropertiesGetmembersNative(objPtr), ref nMembersSize);
				int nMembersIndex = 0;
				while (nMembersIndex < nMembersSize) {
					csMembers.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nMembers + (nMembersIndex * Marshal.SizeOf(nMembers)))));
					nMembersIndex++;
				}

				List<String> csModerators = new List<String>();
				int nModeratorsSize = 0;
				IntPtr nModerators = VidyoRoomPropertiesGetmoderatorsArrayNative(VidyoRoomPropertiesGetmoderatorsNative(objPtr), ref nModeratorsSize);
				int nModeratorsIndex = 0;
				while (nModeratorsIndex < nModeratorsSize) {
					csModerators.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nModerators + (nModeratorsIndex * Marshal.SizeOf(nModerators)))));
					nModeratorsIndex++;
				}

				List<String> csOutcasts = new List<String>();
				int nOutcastsSize = 0;
				IntPtr nOutcasts = VidyoRoomPropertiesGetoutcastsArrayNative(VidyoRoomPropertiesGetoutcastsNative(objPtr), ref nOutcastsSize);
				int nOutcastsIndex = 0;
				while (nOutcastsIndex < nOutcastsSize) {
					csOutcasts.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nOutcasts + (nOutcastsIndex * Marshal.SizeOf(nOutcasts)))));
					nOutcastsIndex++;
				}

				List<String> csOwners = new List<String>();
				int nOwnersSize = 0;
				IntPtr nOwners = VidyoRoomPropertiesGetownersArrayNative(VidyoRoomPropertiesGetownersNative(objPtr), ref nOwnersSize);
				int nOwnersIndex = 0;
				while (nOwnersIndex < nOwnersSize) {
					csOwners.Add((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(Marshal.ReadIntPtr(nOwners + (nOwnersIndex * Marshal.SizeOf(nOwners)))));
					nOwnersIndex++;
				}

				List<RoomParticipantProfile> csParticipantProfiles = new List<RoomParticipantProfile>();
				int nParticipantProfilesSize = 0;
				IntPtr nParticipantProfiles = VidyoRoomPropertiesGetparticipantProfilesArrayNative(VidyoRoomPropertiesGetparticipantProfilesNative(objPtr), ref nParticipantProfilesSize);
				int nParticipantProfilesIndex = 0;
				while (nParticipantProfilesIndex < nParticipantProfilesSize) {
					RoomParticipantProfile csTparticipantProfiles = new RoomParticipantProfile(Marshal.ReadIntPtr(nParticipantProfiles + (nParticipantProfilesIndex * Marshal.SizeOf(nParticipantProfiles))));
					csParticipantProfiles.Add(csTparticipantProfiles);
					nParticipantProfilesIndex++;
				}

				EventSchedule csSchedule = new EventSchedule(VidyoRoomPropertiesGetscheduleNative(objPtr));
				administrators = csAdministrators;
				calendarInviteBody = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetcalendarInviteBodyNative(objPtr));
				calendarInviteHTMLBody = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetcalendarInviteHTMLBodyNative(objPtr));
				calendarInviteSubject = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetcalendarInviteSubjectNative(objPtr));
				creationTime = VidyoRoomPropertiesGetcreationTimeNative(objPtr);
				defaultProfile = csDefaultProfile;
				description = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetdescriptionNative(objPtr));
				designatedPresenter = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetdesignatedPresenterNative(objPtr));
				hasCalendarInviteText = VidyoRoomPropertiesGethasCalendarInviteTextNative(objPtr);
				hasPassword = VidyoRoomPropertiesGethasPasswordNative(objPtr);
				isBroadcastingEnabled = VidyoRoomPropertiesGetisBroadcastingEnabledNative(objPtr);
				isLoggingEnabled = VidyoRoomPropertiesGetisLoggingEnabledNative(objPtr);
				isLoggingPaused = VidyoRoomPropertiesGetisLoggingPausedNative(objPtr);
				isLoggingSupported = VidyoRoomPropertiesGetisLoggingSupportedNative(objPtr);
				isMembersOnly = VidyoRoomPropertiesGetisMembersOnlyNative(objPtr);
				isModerated = VidyoRoomPropertiesGetisModeratedNative(objPtr);
				isPasswordProtected = VidyoRoomPropertiesGetisPasswordProtectedNative(objPtr);
				isPublic = VidyoRoomPropertiesGetisPublicNative(objPtr);
				isSecure = VidyoRoomPropertiesGetisSecureNative(objPtr);
				isWaitingRoomEnabled = VidyoRoomPropertiesGetisWaitingRoomEnabledNative(objPtr);
				language = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetlanguageNative(objPtr));
				loggingLocation = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetloggingLocationNative(objPtr));
				maxParticipants = VidyoRoomPropertiesGetmaxParticipantsNative(objPtr);
				members = csMembers;
				moderatorUrl = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetmoderatorUrlNative(objPtr));
				moderators = csModerators;
				name = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetnameNative(objPtr));
				outcasts = csOutcasts;
				owners = csOwners;
				participantProfiles = csParticipantProfiles;
				password = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetpasswordNative(objPtr));
				schedule = csSchedule;
				webLink = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoRoomPropertiesGetwebLinkNative(objPtr));
				VidyoRoomPropertiesFreeparticipantProfilesArrayNative(nParticipantProfiles, nParticipantProfilesSize);
				VidyoRoomPropertiesFreeownersArrayNative(nOwners, nOwnersSize);
				VidyoRoomPropertiesFreeoutcastsArrayNative(nOutcasts, nOutcastsSize);
				VidyoRoomPropertiesFreemoderatorsArrayNative(nModerators, nModeratorsSize);
				VidyoRoomPropertiesFreemembersArrayNative(nMembers, nMembersSize);
				VidyoRoomPropertiesFreeadministratorsArrayNative(nAdministrators, nAdministratorsSize);
			}
		};
		private static IAcceptIncoming _mIAcceptIncoming;
		private static IAcquireMediaRoute _mIAcquireMediaRoute;
		private static IDelete _mIDelete;
		private static IEnableMedia _mIEnableMedia;
		private static IEnter _mIEnter;
		private static IGetHistory _mIGetHistory;
		private static IGetRoomProperties _mIGetRoomProperties;
		private static IInvite _mIInvite;
		private static IMessageSearch _mIMessageSearch;
		private static IRegisterMessageEventListener _mIRegisterMessageEventListener;
		private static IRegisterParticipantEventListener _mIRegisterParticipantEventListener;
		private static IRegisterPipEventListener _mIRegisterPipEventListener;
		private static IRegisterRecorderInCallEventListener _mIRegisterRecorderInCallEventListener;
		private static IRegisterResourceManagerEventListener _mIRegisterResourceManagerEventListener;
		private static IRegisterRoomPropertiesEventListener _mIRegisterRoomPropertiesEventListener;
		private static IRegisterSubjectEventListener _mIRegisterSubjectEventListener;
		private static IRegisterUnprocessedAudioEventListener _mIRegisterUnprocessedAudioEventListener;
		private static IRequestRoleChange _mIRequestRoleChange;
		private static ISetFavorite _mISetFavorite;
		private static ISetRoomProperties _mISetRoomProperties;
		public Room(IntPtr other){
			objPtr = VidyoRoomConstructCopyNative(other);
			VidyoRoomSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~Room(){
			if(objPtr != IntPtr.Zero){
				VidyoRoomSetUserDataNative(objPtr, IntPtr.Zero);
				VidyoRoomDestructNative(objPtr);
			}
		}
		public Boolean AcceptIncoming(IAcceptIncoming _iIAcceptIncoming){
			_mIAcceptIncoming = _iIAcceptIncoming;
			_mOnIncomingEntered = OnIncomingEnteredDelegate;
			_mOnIncomingExited = OnIncomingExitedDelegate;

			Boolean ret = VidyoRoomAcceptIncomingNative(objPtr, _mOnIncomingEntered, _mOnIncomingExited);

			return ret;
		}
		public Boolean AcquireMediaRoute(IAcquireMediaRoute _iIAcquireMediaRoute){
			_mIAcquireMediaRoute = _iIAcquireMediaRoute;
			_mOnMediaRouteAcquired = OnMediaRouteAcquiredDelegate;
			_mOnMediaRouteAcquireFailed = OnMediaRouteAcquireFailedDelegate;

			Boolean ret = VidyoRoomAcquireMediaRouteNative(objPtr, _mOnMediaRouteAcquired, _mOnMediaRouteAcquireFailed);

			return ret;
		}
		public void AddLocalCamera(LocalCamera localCamera, Boolean removeOthers){

			VidyoRoomAddLocalCameraNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddLocalMicrophone(LocalMicrophone localMicrophone, Boolean removeOthers, Boolean isAES){

			VidyoRoomAddLocalMicrophoneNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero, removeOthers, isAES);
		}
		public void AddLocalMonitor(LocalMonitor localMonitor, Boolean removeOthers){

			VidyoRoomAddLocalMonitorNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddLocalRenderer(LocalRenderer localRenderer, Boolean removeOthers){

			VidyoRoomAddLocalRendererNative(objPtr, (localRenderer != null) ? localRenderer.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddLocalSpeaker(LocalSpeaker localSpeaker, Boolean removeOthers, Boolean isAES){

			VidyoRoomAddLocalSpeakerNative(objPtr, (localSpeaker != null) ? localSpeaker.GetObjectPtr():IntPtr.Zero, removeOthers, isAES);
		}
		public void AddLocalWindowShare(LocalWindowShare localWindowShare, Boolean removeOthers){

			VidyoRoomAddLocalWindowShareNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public void AddVirtualWindowShare(VirtualWindowShare virtualWindowShare, Boolean removeOthers){

			VidyoRoomAddVirtualWindowShareNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero, removeOthers);
		}
		public Boolean BootAllParticipants(String reason){

			IntPtr nReason = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(reason ?? string.Empty);
			Boolean ret = VidyoRoomBootAllParticipantsNative(objPtr, nReason);
			Marshal.FreeHGlobal(nReason);

			return ret;
		}
		public Boolean BootParticipant(String userId, String reason){

			IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);
			IntPtr nReason = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(reason ?? string.Empty);
			Boolean ret = VidyoRoomBootParticipantNative(objPtr, nUserId, nReason);
			Marshal.FreeHGlobal(nReason);
			Marshal.FreeHGlobal(nUserId);

			return ret;
		}
		public Boolean CancelInvite(String inviteeId){

			IntPtr nInviteeId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(inviteeId ?? string.Empty);
			Boolean ret = VidyoRoomCancelInviteNative(objPtr, nInviteeId);
			Marshal.FreeHGlobal(nInviteeId);

			return ret;
		}
		public void Delete(IDelete _iIDelete){
			_mIDelete = _iIDelete;
			_mOnDeleteResult = OnDeleteResultDelegate;

			VidyoRoomDeleteNative(objPtr, _mOnDeleteResult);
		}
		public Boolean DisableMedia(){

			Boolean ret = VidyoRoomDisableMediaNative(objPtr);

			return ret;
		}
		public Boolean EnableMedia(IEnableMedia _iIEnableMedia){
			_mIEnableMedia = _iIEnableMedia;
			_mOnMediaEnabled = OnMediaEnabledDelegate;
			_mOnMediaFailed = OnMediaFailedDelegate;
			_mOnMediaDisabled = OnMediaDisabledDelegate;

			Boolean ret = VidyoRoomEnableMediaNative(objPtr, _mOnMediaEnabled, _mOnMediaFailed, _mOnMediaDisabled);

			return ret;
		}
		public Boolean Enter(String password, IEnter _iIEnter){
			_mIEnter = _iIEnter;
			_mOnEntered = OnEnteredDelegate;
			_mOnExited = OnExitedDelegate;

			IntPtr nPassword = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(password ?? string.Empty);
			Boolean ret = VidyoRoomEnterNative(objPtr, nPassword, _mOnEntered, _mOnExited);
			Marshal.FreeHGlobal(nPassword);

			return ret;
		}
		public Boolean GetHistory(uint numMessages, IGetHistory _iIGetHistory){
			_mIGetHistory = _iIGetHistory;
			_mOnGetHistoryResults = OnGetHistoryResultsDelegate;

			Boolean ret = VidyoRoomGetHistoryNative(objPtr, numMessages, _mOnGetHistoryResults);

			return ret;
		}
		public Boolean GetHistoryById(long messageId, uint numMessagesBefore, uint numMessagesAfter, IGetHistory _iIGetHistory){
			_mIGetHistory = _iIGetHistory;
			_mOnGetHistoryResults = OnGetHistoryResultsDelegate;

			Boolean ret = VidyoRoomGetHistoryByIdNative(objPtr, messageId, numMessagesBefore, numMessagesAfter, _mOnGetHistoryResults);

			return ret;
		}
		public Boolean GetHistoryByTime(ulong time, uint numMessagesBefore, uint numMessagesAfter, IGetHistory _iIGetHistory){
			_mIGetHistory = _iIGetHistory;
			_mOnGetHistoryResults = OnGetHistoryResultsDelegate;

			Boolean ret = VidyoRoomGetHistoryByTimeNative(objPtr, time, numMessagesBefore, numMessagesAfter, _mOnGetHistoryResults);

			return ret;
		}
		public String GetId(){

			IntPtr ret = VidyoRoomGetIdNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public Boolean GetRoomProperties(IGetRoomProperties _iIGetRoomProperties){
			_mIGetRoomProperties = _iIGetRoomProperties;
			_mOnGetRoomPropertiesResult = OnGetRoomPropertiesResultDelegate;

			Boolean ret = VidyoRoomGetRoomPropertiesNative(objPtr, _mOnGetRoomPropertiesResult);

			return ret;
		}
		public void GetSelectedLocalCameras(List<LocalCamera> cameras){

			IntPtr nCameras = IntPtr.Zero;

			VidyoRoomGetSelectedLocalCamerasNative(objPtr, nCameras);
		}
		public void GetSelectedLocalMicrophones(List<LocalMicrophone> mics){

			IntPtr nMics = IntPtr.Zero;

			VidyoRoomGetSelectedLocalMicrophonesNative(objPtr, nMics);
		}
		public void GetSelectedLocalMonitors(List<LocalMonitor> monitors){

			IntPtr nMonitors = IntPtr.Zero;

			VidyoRoomGetSelectedLocalMonitorsNative(objPtr, nMonitors);
		}
		public void GetSelectedLocalRenderers(List<LocalRenderer> renderers){

			IntPtr nRenderers = IntPtr.Zero;

			VidyoRoomGetSelectedLocalRenderersNative(objPtr, nRenderers);
		}
		public void GetSelectedLocalSpeakers(List<LocalSpeaker> speakers){

			IntPtr nSpeakers = IntPtr.Zero;

			VidyoRoomGetSelectedLocalSpeakersNative(objPtr, nSpeakers);
		}
		public void GetSelectedLocalWindowShares(List<LocalWindowShare> windowShares){

			IntPtr nWindowShares = IntPtr.Zero;

			VidyoRoomGetSelectedLocalWindowSharesNative(objPtr, nWindowShares);
		}
		public Boolean GetStats(RoomStats stats){

			Boolean ret = VidyoRoomGetStatsNative(objPtr, (stats != null) ? stats.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public RoomType GetType(){

			RoomType ret = VidyoRoomGetTypeNative(objPtr);

			return ret;
		}
		public User GetUser(){

			IntPtr ret = VidyoRoomGetUserNative(objPtr);
			User csRet = null;
			if(ret != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(ret) == IntPtr.Zero)
					csRet = new User(ret);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(ret);
					csRet = (User)objHandle.Target;
				}
			}

			return csRet;
		}
		public void HideStatisticsDialog(){

			VidyoRoomHideStatisticsDialogNative(objPtr);
		}
		public Boolean Invite(String userId, String message, IInvite _iIInvite){
			_mIInvite = _iIInvite;
			_mOnInviteResult = OnInviteResultDelegate;

			IntPtr nUserId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userId ?? string.Empty);
			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			Boolean ret = VidyoRoomInviteNative(objPtr, nUserId, nMessage, _mOnInviteResult);
			Marshal.FreeHGlobal(nMessage);
			Marshal.FreeHGlobal(nUserId);

			return ret;
		}
		public Boolean InviteAll(String message, IInvite _iIInvite){
			_mIInvite = _iIInvite;
			_mOnInviteResult = OnInviteResultDelegate;

			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			Boolean ret = VidyoRoomInviteAllNative(objPtr, nMessage, _mOnInviteResult);
			Marshal.FreeHGlobal(nMessage);

			return ret;
		}
		public Boolean InviteN(List<String> userIds, String message, IInvite _iIInvite){
			_mIInvite = _iIInvite;
			_mOnInviteResult = OnInviteResultDelegate;

			IntPtr nUserIds = IntPtr.Zero;

			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			Boolean ret = VidyoRoomInviteNNative(objPtr, nUserIds, nMessage, _mOnInviteResult);
			Marshal.FreeHGlobal(nMessage);

			return ret;
		}
		public Boolean Leave(){

			Boolean ret = VidyoRoomLeaveNative(objPtr);

			return ret;
		}
		public Boolean MessageSearch(String searchText, uint index, uint pageSize, IMessageSearch _iIMessageSearch){
			_mIMessageSearch = _iIMessageSearch;
			_mOnMessageSearchResults = OnMessageSearchResultsDelegate;

			IntPtr nSearchText = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(searchText ?? string.Empty);
			Boolean ret = VidyoRoomMessageSearchNative(objPtr, nSearchText, index, pageSize, _mOnMessageSearchResults);
			Marshal.FreeHGlobal(nSearchText);

			return ret;
		}
		public Boolean RegisterMessageEventListener(IRegisterMessageEventListener _iIRegisterMessageEventListener){
			_mIRegisterMessageEventListener = _iIRegisterMessageEventListener;
			_mOnMessageReceived = OnMessageReceivedDelegate;
			_mOnMessageAcknowledged = OnMessageAcknowledgedDelegate;
			_mOnMessageRead = OnMessageReadDelegate;
			_mOnMessageTypingIndication = OnMessageTypingIndicationDelegate;

			Boolean ret = VidyoRoomRegisterMessageEventListenerNative(objPtr, _mOnMessageReceived, _mOnMessageAcknowledged, _mOnMessageRead, _mOnMessageTypingIndication);

			return ret;
		}
		public Boolean RegisterParticipantEventListener(IRegisterParticipantEventListener _iIRegisterParticipantEventListener){
			_mIRegisterParticipantEventListener = _iIRegisterParticipantEventListener;
			_mOnParticipantJoined = OnParticipantJoinedDelegate;
			_mOnParticipantLeft = OnParticipantLeftDelegate;
			_mOnDynamicParticipantChanged = OnDynamicParticipantChangedDelegate;
			_mOnLoudestParticipantChanged = OnLoudestParticipantChangedDelegate;

			Boolean ret = VidyoRoomRegisterParticipantEventListenerNative(objPtr, _mOnParticipantJoined, _mOnParticipantLeft, _mOnDynamicParticipantChanged, _mOnLoudestParticipantChanged);

			return ret;
		}
		public Boolean RegisterPipEventListener(IRegisterPipEventListener _iIRegisterPipEventListener){
			_mIRegisterPipEventListener = _iIRegisterPipEventListener;
			_mOnPipLocationChanged = OnPipLocationChangedDelegate;

			Boolean ret = VidyoRoomRegisterPipEventListenerNative(objPtr, _mOnPipLocationChanged);

			return ret;
		}
		public Boolean RegisterRecorderInCallEventListener(IRegisterRecorderInCallEventListener _iIRegisterRecorderInCallEventListener){
			_mIRegisterRecorderInCallEventListener = _iIRegisterRecorderInCallEventListener;
			_mRecorderInCall = RecorderInCallDelegate;

			Boolean ret = VidyoRoomRegisterRecorderInCallEventListenerNative(objPtr, _mRecorderInCall);

			return ret;
		}
		public Boolean RegisterResourceManagerEventListener(IRegisterResourceManagerEventListener _iIRegisterResourceManagerEventListener){
			_mIRegisterResourceManagerEventListener = _iIRegisterResourceManagerEventListener;
			_mOnAvailableResourcesChanged = OnAvailableResourcesChangedDelegate;
			_mOnMaxRemoteSourcesChanged = OnMaxRemoteSourcesChangedDelegate;

			Boolean ret = VidyoRoomRegisterResourceManagerEventListenerNative(objPtr, _mOnAvailableResourcesChanged, _mOnMaxRemoteSourcesChanged);

			return ret;
		}
		public Boolean RegisterRoomPropertiesEventListener(IRegisterRoomPropertiesEventListener _iIRegisterRoomPropertiesEventListener){
			_mIRegisterRoomPropertiesEventListener = _iIRegisterRoomPropertiesEventListener;
			_mOnRoomPropertiesChanged = OnRoomPropertiesChangedDelegate;

			Boolean ret = VidyoRoomRegisterRoomPropertiesEventListenerNative(objPtr, _mOnRoomPropertiesChanged);

			return ret;
		}
		public Boolean RegisterSubjectEventListener(IRegisterSubjectEventListener _iIRegisterSubjectEventListener){
			_mIRegisterSubjectEventListener = _iIRegisterSubjectEventListener;
			_mOnSetSubject = OnSetSubjectDelegate;

			Boolean ret = VidyoRoomRegisterSubjectEventListenerNative(objPtr, _mOnSetSubject);

			return ret;
		}
		public Boolean RegisterUnprocessedAudioEventListener(IRegisterUnprocessedAudioEventListener _iIRegisterUnprocessedAudioEventListener){
			_mIRegisterUnprocessedAudioEventListener = _iIRegisterUnprocessedAudioEventListener;
			_mOnUnprocessedAudioSupportChanged = OnUnprocessedAudioSupportChangedDelegate;
			_mOnUnprocessedAudioStarted = OnUnprocessedAudioStartedDelegate;

			Boolean ret = VidyoRoomRegisterUnprocessedAudioEventListenerNative(objPtr, _mOnUnprocessedAudioSupportChanged, _mOnUnprocessedAudioStarted);

			return ret;
		}
		public Boolean RejectIncoming(){

			Boolean ret = VidyoRoomRejectIncomingNative(objPtr);

			return ret;
		}
		public void RemoveLocalCamera(LocalCamera localCamera){

			VidyoRoomRemoveLocalCameraNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalMicrophone(LocalMicrophone localMicrophone){

			VidyoRoomRemoveLocalMicrophoneNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalMonitor(LocalMonitor localMonitor){

			VidyoRoomRemoveLocalMonitorNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalRenderer(LocalRenderer localRenderer){

			VidyoRoomRemoveLocalRendererNative(objPtr, (localRenderer != null) ? localRenderer.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalSpeaker(LocalSpeaker localSpeaker){

			VidyoRoomRemoveLocalSpeakerNative(objPtr, (localSpeaker != null) ? localSpeaker.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveLocalWindowShare(LocalWindowShare localWindowShare){

			VidyoRoomRemoveLocalWindowShareNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero);
		}
		public void RemoveVirtualWindowShare(VirtualWindowShare virtualWindowShare){

			VidyoRoomRemoveVirtualWindowShareNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero);
		}
		public Boolean ReportLocalParticipantOnJoined(Boolean reportLocalParticipant){

			Boolean ret = VidyoRoomReportLocalParticipantOnJoinedNative(objPtr, reportLocalParticipant);

			return ret;
		}
		public Boolean RequestRoleChange(Role newRole, RoleAuthentication auth, IRequestRoleChange _iIRequestRoleChange, String requestId){
			_mIRequestRoleChange = _iIRequestRoleChange;
			_mOnRequestRoleChangeResult = OnRequestRoleChangeResultDelegate;

			IntPtr nRequestId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(requestId ?? string.Empty);
			Boolean ret = VidyoRoomRequestRoleChangeNative(objPtr, newRole, (auth != null) ? auth.GetObjectPtr():IntPtr.Zero, _mOnRequestRoleChangeResult, nRequestId);
			Marshal.FreeHGlobal(nRequestId);

			return ret;
		}
		public void ResizeStatisticsDialog(int width, int height){

			VidyoRoomResizeStatisticsDialogNative(objPtr, width, height);
		}
		public Boolean SendMessage(String message){

			IntPtr nMessage = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(message ?? string.Empty);
			Boolean ret = VidyoRoomSendMessageNative(objPtr, nMessage);
			Marshal.FreeHGlobal(nMessage);

			return ret;
		}
		public Boolean SendMessageAcknowledged(long messageId){

			Boolean ret = VidyoRoomSendMessageAcknowledgedNative(objPtr, messageId);

			return ret;
		}
		public Boolean SendMessageTypingIndication(ChatMessage.ChatMessageTypingIndication typingIndication){

			Boolean ret = VidyoRoomSendMessageTypingIndicationNative(objPtr, typingIndication);

			return ret;
		}
		public Boolean SetDynamicGenerationPosition(uint generation, int x, int y, uint width, uint height, ulong frameInterval){

			Boolean ret = VidyoRoomSetDynamicGenerationPositionNative(objPtr, generation, x, y, width, height, frameInterval);

			return ret;
		}
		public Boolean SetDynamicLocalRenderer(LocalRenderer renderer){

			Boolean ret = VidyoRoomSetDynamicLocalRendererNative(objPtr, (renderer != null) ? renderer.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public void SetFavorite(Boolean isFavorite, ISetFavorite _iISetFavorite){
			_mISetFavorite = _iISetFavorite;
			_mOnSetFavoriteResult = OnSetFavoriteResultDelegate;

			VidyoRoomSetFavoriteNative(objPtr, isFavorite, _mOnSetFavoriteResult);
		}
		public Boolean SetMaxAudioSources(uint count){

			Boolean ret = VidyoRoomSetMaxAudioSourcesNative(objPtr, count);

			return ret;
		}
		public void SetMaxBitRate(uint bitRate){

			VidyoRoomSetMaxBitRateNative(objPtr, bitRate);
		}
		public Boolean SetMaxVideoSources(uint count){

			Boolean ret = VidyoRoomSetMaxVideoSourcesNative(objPtr, count);

			return ret;
		}
		public Boolean SetRoomProperties(RoomProperties roomProperties, ISetRoomProperties _iISetRoomProperties){
			_mISetRoomProperties = _iISetRoomProperties;
			_mOnSetRoomPropertiesResult = OnSetRoomPropertiesResultDelegate;

			Boolean ret = VidyoRoomSetRoomPropertiesNative(objPtr, (roomProperties != null) ? roomProperties.GetObjectPtr():IntPtr.Zero, _mOnSetRoomPropertiesResult);

			return ret;
		}
		public Boolean SetSubject(String subject){

			IntPtr nSubject = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(subject ?? string.Empty);
			Boolean ret = VidyoRoomSetSubjectNative(objPtr, nSubject);
			Marshal.FreeHGlobal(nSubject);

			return ret;
		}
		public void ShowStatisticsDialog(){

			VidyoRoomShowStatisticsDialogNative(objPtr);
		}
		public Boolean UnregisterMessageEventListener(){

			Boolean ret = VidyoRoomUnregisterMessageEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterParticipantEventListener(){

			Boolean ret = VidyoRoomUnregisterParticipantEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterPipEventListener(){

			Boolean ret = VidyoRoomUnregisterPipEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRecorderInCallEventListener(){

			Boolean ret = VidyoRoomUnregisterRecorderInCallEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterResourceManagerEventListener(){

			Boolean ret = VidyoRoomUnregisterResourceManagerEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRoomPropertiesEventListener(){

			Boolean ret = VidyoRoomUnregisterRoomPropertiesEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterSubjectEventListener(){

			Boolean ret = VidyoRoomUnregisterSubjectEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterUnprocessedAudioEventListener(){

			Boolean ret = VidyoRoomUnregisterUnprocessedAudioEventListenerNative(objPtr);

			return ret;
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnAvailableResourcesChanged))]
#endif
		private static void OnAvailableResourcesChangedDelegate(IntPtr room, uint cpuEncode, uint cpuDecode, uint bandwidthSend, uint bandwidthReceive){
			if(_mIRegisterResourceManagerEventListener != null)
				_mIRegisterResourceManagerEventListener.OnAvailableResourcesChanged(cpuEncode, cpuDecode, bandwidthSend, bandwidthReceive);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnDeleteResult))]
#endif
		private static void OnDeleteResultDelegate(IntPtr room, RoomDeleteResult result){
			if(_mIDelete != null)
				_mIDelete.OnDeleteResult(result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnDynamicParticipantChanged))]
#endif
		private static void OnDynamicParticipantChangedDelegate(IntPtr room, IntPtr selectedParticipants){
			List<Participant> csSelectedParticipants = new List<Participant>();
			int nSelectedParticipantsSize = 0;
			IntPtr nSelectedParticipants = VidyoRoomOnDynamicParticipantChangedGetselectedParticipantsArrayNative(selectedParticipants, ref nSelectedParticipantsSize);
			int nSelectedParticipantsIndex = 0;
			while (nSelectedParticipantsIndex < nSelectedParticipantsSize) {
				Participant csTselectedParticipants = null;
				if(Marshal.ReadIntPtr(nSelectedParticipants + (nSelectedParticipantsIndex * Marshal.SizeOf(nSelectedParticipants))) != IntPtr.Zero){
					if(Participant.VidyoParticipantGetUserDataNative(Marshal.ReadIntPtr(nSelectedParticipants + (nSelectedParticipantsIndex * Marshal.SizeOf(nSelectedParticipants)))) == IntPtr.Zero)
						csTselectedParticipants = new Participant(Marshal.ReadIntPtr(nSelectedParticipants + (nSelectedParticipantsIndex * Marshal.SizeOf(nSelectedParticipants))));
					else{
						GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(Marshal.ReadIntPtr(nSelectedParticipants + (nSelectedParticipantsIndex * Marshal.SizeOf(nSelectedParticipants))));
						csTselectedParticipants = (Participant)objHandle.Target;
					}
				}
				csSelectedParticipants.Add(csTselectedParticipants);
				nSelectedParticipantsIndex++;
			}

			if(_mIRegisterParticipantEventListener != null)
				_mIRegisterParticipantEventListener.OnDynamicParticipantChanged(csSelectedParticipants);
			VidyoRoomOnDynamicParticipantChangedFreeselectedParticipantsArrayNative(nSelectedParticipants, nSelectedParticipantsSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnEntered))]
#endif
		private static void OnEnteredDelegate(IntPtr room, RoomEnterResult result){
			if(_mIEnter != null)
				_mIEnter.OnEntered(result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnExited))]
#endif
		private static void OnExitedDelegate(IntPtr room, RoomExitReason reason){
			if(_mIEnter != null)
				_mIEnter.OnExited(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnGetHistoryResults))]
#endif
		private static void OnGetHistoryResultsDelegate(IntPtr room, IntPtr records, long historySize, RoomSearchResult result){
			List<ChatMessage> csRecords = new List<ChatMessage>();
			int nRecordsSize = 0;
			IntPtr nRecords = VidyoRoomOnGetHistoryResultsGetrecordsArrayNative(records, ref nRecordsSize);
			int nRecordsIndex = 0;
			while (nRecordsIndex < nRecordsSize) {
				ChatMessage csTrecords = new ChatMessage(Marshal.ReadIntPtr(nRecords + (nRecordsIndex * Marshal.SizeOf(nRecords))));
				csRecords.Add(csTrecords);
				nRecordsIndex++;
			}

			if(_mIGetHistory != null)
				_mIGetHistory.OnGetHistoryResults(csRecords, historySize, result);
			VidyoRoomOnGetHistoryResultsFreerecordsArrayNative(nRecords, nRecordsSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnGetRoomPropertiesResult))]
#endif
		private static void OnGetRoomPropertiesResultDelegate(IntPtr room, RoomGetPropertiesResult result, IntPtr roomProperties){
			RoomProperties csRoomProperties = new RoomProperties(roomProperties);
			if(_mIGetRoomProperties != null)
				_mIGetRoomProperties.OnGetRoomPropertiesResult(result, csRoomProperties);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnIncomingEntered))]
#endif
		private static void OnIncomingEnteredDelegate(IntPtr room, RoomEnterResult result){
			if(_mIAcceptIncoming != null)
				_mIAcceptIncoming.OnIncomingEntered(result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnIncomingExited))]
#endif
		private static void OnIncomingExitedDelegate(IntPtr room, RoomExitReason reason){
			if(_mIAcceptIncoming != null)
				_mIAcceptIncoming.OnIncomingExited(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnInviteResult))]
#endif
		private static void OnInviteResultDelegate(IntPtr room, IntPtr inviteeId, RoomInviteResult result){
			IntPtr n_inviteeId = VidyoRoomOnInviteResultGetinviteeIdCStr(inviteeId);

			if(_mIInvite != null)
				_mIInvite.OnInviteResult((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_inviteeId), result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLoudestParticipantChanged))]
#endif
		private static void OnLoudestParticipantChangedDelegate(IntPtr room, IntPtr participant, Boolean isAudioOnly, Boolean isStatic){
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterParticipantEventListener != null)
				_mIRegisterParticipantEventListener.OnLoudestParticipantChanged(csParticipant, isAudioOnly, isStatic);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMaxRemoteSourcesChanged))]
#endif
		private static void OnMaxRemoteSourcesChangedDelegate(IntPtr room, uint maxRemoteSources){
			if(_mIRegisterResourceManagerEventListener != null)
				_mIRegisterResourceManagerEventListener.OnMaxRemoteSourcesChanged(maxRemoteSources);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaDisabled))]
#endif
		private static void OnMediaDisabledDelegate(IntPtr room, RoomMediaDisableReason reason){
			if(_mIEnableMedia != null)
				_mIEnableMedia.OnMediaDisabled(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaEnabled))]
#endif
		private static void OnMediaEnabledDelegate(IntPtr room){
			if(_mIEnableMedia != null)
				_mIEnableMedia.OnMediaEnabled();
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaFailed))]
#endif
		private static void OnMediaFailedDelegate(IntPtr room, RoomMediaFailReason reason){
			if(_mIEnableMedia != null)
				_mIEnableMedia.OnMediaFailed(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaRouteAcquireFailed))]
#endif
		private static void OnMediaRouteAcquireFailedDelegate(IntPtr room, RoomMediaFailReason reason){
			if(_mIAcquireMediaRoute != null)
				_mIAcquireMediaRoute.OnMediaRouteAcquireFailed(reason);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMediaRouteAcquired))]
#endif
		private static void OnMediaRouteAcquiredDelegate(IntPtr room){
			if(_mIAcquireMediaRoute != null)
				_mIAcquireMediaRoute.OnMediaRouteAcquired();
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageAcknowledged))]
#endif
		private static void OnMessageAcknowledgedDelegate(IntPtr room, IntPtr chatMessage){
			ChatMessage csChatMessage = new ChatMessage(chatMessage);
			if(_mIRegisterMessageEventListener != null)
				_mIRegisterMessageEventListener.OnMessageAcknowledged(csChatMessage);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageRead))]
#endif
		private static void OnMessageReadDelegate(IntPtr room, IntPtr participant, long messageId){
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterMessageEventListener != null)
				_mIRegisterMessageEventListener.OnMessageRead(csParticipant, messageId);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageReceived))]
#endif
		private static void OnMessageReceivedDelegate(IntPtr room, IntPtr participant, IntPtr chatMessage){
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			ChatMessage csChatMessage = new ChatMessage(chatMessage);
			if(_mIRegisterMessageEventListener != null)
				_mIRegisterMessageEventListener.OnMessageReceived(csParticipant, csChatMessage);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageSearchResults))]
#endif
		private static void OnMessageSearchResultsDelegate(IntPtr room, IntPtr searchText, IntPtr records, RoomSearchResult result){
			List<ChatMessage> csRecords = new List<ChatMessage>();
			int nRecordsSize = 0;
			IntPtr nRecords = VidyoRoomOnMessageSearchResultsGetrecordsArrayNative(records, ref nRecordsSize);
			int nRecordsIndex = 0;
			while (nRecordsIndex < nRecordsSize) {
				ChatMessage csTrecords = new ChatMessage(Marshal.ReadIntPtr(nRecords + (nRecordsIndex * Marshal.SizeOf(nRecords))));
				csRecords.Add(csTrecords);
				nRecordsIndex++;
			}

			if(_mIMessageSearch != null)
				_mIMessageSearch.OnMessageSearchResults((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(searchText), csRecords, result);
			VidyoRoomOnMessageSearchResultsFreerecordsArrayNative(nRecords, nRecordsSize);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnMessageTypingIndication))]
#endif
		private static void OnMessageTypingIndicationDelegate(IntPtr room, IntPtr participant, ChatMessage.ChatMessageTypingIndication typingIndication){
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterMessageEventListener != null)
				_mIRegisterMessageEventListener.OnMessageTypingIndication(csParticipant, typingIndication);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnParticipantJoined))]
#endif
		private static void OnParticipantJoinedDelegate(IntPtr room, IntPtr participant){
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterParticipantEventListener != null)
				_mIRegisterParticipantEventListener.OnParticipantJoined(csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnParticipantLeft))]
#endif
		private static void OnParticipantLeftDelegate(IntPtr room, IntPtr participant){
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterParticipantEventListener != null)
				_mIRegisterParticipantEventListener.OnParticipantLeft(csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnPipLocationChanged))]
#endif
		private static void OnPipLocationChangedDelegate(IntPtr room, int x, int y, uint width, uint height, Boolean isExpanded){
			if(_mIRegisterPipEventListener != null)
				_mIRegisterPipEventListener.OnPipLocationChanged(x, y, width, height, isExpanded);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRequestRoleChangeResult))]
#endif
		private static void OnRequestRoleChangeResultDelegate(IntPtr room, RoomSetPropertiesResult result, IntPtr requestId){
			IntPtr n_requestId = VidyoRoomOnRequestRoleChangeResultGetrequestIdCStr(requestId);

			if(_mIRequestRoleChange != null)
				_mIRequestRoleChange.OnRequestRoleChangeResult(result, (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_requestId));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRoomPropertiesChanged))]
#endif
		private static void OnRoomPropertiesChangedDelegate(IntPtr room, IntPtr roomProperties){
			RoomProperties csRoomProperties = new RoomProperties(roomProperties);
			if(_mIRegisterRoomPropertiesEventListener != null)
				_mIRegisterRoomPropertiesEventListener.OnRoomPropertiesChanged(csRoomProperties);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnSetFavoriteResult))]
#endif
		private static void OnSetFavoriteResultDelegate(IntPtr room, Boolean isFavorite, RoomSetFavoriteResult result){
			if(_mISetFavorite != null)
				_mISetFavorite.OnSetFavoriteResult(isFavorite, result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnSetRoomPropertiesResult))]
#endif
		private static void OnSetRoomPropertiesResultDelegate(IntPtr room, RoomSetPropertiesResult result){
			if(_mISetRoomProperties != null)
				_mISetRoomProperties.OnSetRoomPropertiesResult(result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnSetSubject))]
#endif
		private static void OnSetSubjectDelegate(IntPtr room, IntPtr subject){
			if(_mIRegisterSubjectEventListener != null)
				_mIRegisterSubjectEventListener.OnSetSubject((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(subject));
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnUnprocessedAudioStarted))]
#endif
		private static void OnUnprocessedAudioStartedDelegate(IntPtr room, Boolean started){
			if(_mIRegisterUnprocessedAudioEventListener != null)
				_mIRegisterUnprocessedAudioEventListener.OnUnprocessedAudioStarted(started);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnUnprocessedAudioSupportChanged))]
#endif
		private static void OnUnprocessedAudioSupportChangedDelegate(IntPtr room, Boolean supported){
			if(_mIRegisterUnprocessedAudioEventListener != null)
				_mIRegisterUnprocessedAudioEventListener.OnUnprocessedAudioSupportChanged(supported);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(RecorderInCall))]
#endif
		private static void RecorderInCallDelegate(IntPtr r, Boolean recorderInCall){
			if(_mIRegisterRecorderInCallEventListener != null)
				_mIRegisterRecorderInCallEventListener.RecorderInCall(recorderInCall);
		}
	};
}
