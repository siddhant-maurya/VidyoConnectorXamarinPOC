// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class LocalSpeaker{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoLocalSpeaker reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalSpeakerConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalSpeakerDestructNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalSpeakerGetIdNative(IntPtr s);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalSpeakerGetNameNative(IntPtr s);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern uint VidyoLocalSpeakerGetVolumeNative(IntPtr s);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoLocalSpeakerIsPausedNative(IntPtr s);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalSpeakerPauseNative(IntPtr s);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalSpeakerPlayToneNative(IntPtr s, char dtmfTone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalSpeakerResumeNative(IntPtr s);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalSpeakerSetVolumeNative(IntPtr s, uint volumePercent);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalSpeakerStopSoundNative(IntPtr s);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoLocalSpeakerGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoLocalSpeakerSetUserDataNative(IntPtr obj, IntPtr userData);

		public LocalSpeaker(IntPtr other){
			objPtr = VidyoLocalSpeakerConstructCopyNative(other);
			VidyoLocalSpeakerSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~LocalSpeaker(){
			if(objPtr != IntPtr.Zero){
				VidyoLocalSpeakerSetUserDataNative(objPtr, IntPtr.Zero);
				VidyoLocalSpeakerDestructNative(objPtr);
			}
		}
		public String GetId(){

			IntPtr ret = VidyoLocalSpeakerGetIdNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public String GetName(){

			IntPtr ret = VidyoLocalSpeakerGetNameNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public uint GetVolume(){

			uint ret = VidyoLocalSpeakerGetVolumeNative(objPtr);

			return ret;
		}
		public Boolean IsPaused(){

			Boolean ret = VidyoLocalSpeakerIsPausedNative(objPtr);

			return ret;
		}
		public void Pause(){

			VidyoLocalSpeakerPauseNative(objPtr);
		}
		public void PlayTone(char dtmfTone){

			VidyoLocalSpeakerPlayToneNative(objPtr, dtmfTone);
		}
		public void Resume(){

			VidyoLocalSpeakerResumeNative(objPtr);
		}
		public void SetVolume(uint volumePercent){

			VidyoLocalSpeakerSetVolumeNative(objPtr, volumePercent);
		}
		public void StopSound(){

			VidyoLocalSpeakerStopSoundNative(objPtr);
		}
	};
}
