// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class Endpoint{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoEndpoint reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointAppLogNative(IntPtr e, [MarshalAs(UnmanagedType.I4)]ClientAppLogLevel logLevel, IntPtr logMsg);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointAssignViewToCompositeRendererNative(IntPtr e, ref IntPtr viewId, [MarshalAs(UnmanagedType.I4)]LocalRenderer.LocalRendererViewStyle viewStyle, uint remoteParticipants);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointAssignViewToLocalCameraNative(IntPtr e, ref IntPtr viewId, IntPtr localCamera, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointAssignViewToLocalMonitorNative(IntPtr e, ref IntPtr viewId, IntPtr localMonitor, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointAssignViewToLocalWindowShareNative(IntPtr e, ref IntPtr viewId, IntPtr localWindowShare, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointAssignViewToRemoteCameraNative(IntPtr e, ref IntPtr viewId, IntPtr remoteCamera, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointAssignViewToRemoteWindowShareNative(IntPtr e, ref IntPtr viewId, IntPtr remoteWindowShare, Boolean displayCropped, Boolean allowZoom);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointCompressLogsNative(IntPtr e, IntPtr compressedFileName, OnLogCompressionComplete onComplete);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoEndpointConstructNative(ref IntPtr viewId, [MarshalAs(UnmanagedType.I4)]LocalRenderer.LocalRendererViewStyle viewStyle, uint remoteParticipants, IntPtr consoleLogFilter, IntPtr logFileFilter, IntPtr logFileName);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoEndpointConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointCreateRendererNative(IntPtr e, IntPtr monitor, uint width, uint height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointCreateRendererFromViewIdNative(IntPtr e, ref IntPtr viewId, int x, int y, uint width, uint height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointCreateRendererMultiScreenNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointCycleCameraNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointCycleMicrophoneNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointCycleSpeakerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointDestructNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointDisableNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointDisableDebugNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointEnableDebugNative(IntPtr e, uint port, IntPtr logFilter);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointEnableFileLoggerNative(IntPtr e, IntPtr logFileName, IntPtr logFileFilter);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoEndpointGetApplicationTagNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern EndpointTradeOffProfile VidyoEndpointGetCpuTradeOffProfileNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointGetFileLoggerCategoryListNative(IntPtr e, IntPtr categories);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoEndpointGetIdNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointGetProductInfoNative(IntPtr e, IntPtr productInfo, IntPtr supportedFeature);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoEndpointGetStatsNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoEndpointGetStatsJsonNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointHideViewNative(IntPtr e, ref IntPtr viewId);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointIsDebugEnabledNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalCameraSelectAdvancedNative(IntPtr e, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalCameraUnselectAdvancedNative(IntPtr e, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalMicrophoneSelectAdvancedNative(IntPtr e, IntPtr localMicrophone, Boolean previewedPreCall);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalMicrophoneUnselectAdvancedNative(IntPtr e, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalMonitorSelectAdvancedNative(IntPtr e, IntPtr localMonitor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalMonitorUnselectAdvancedNative(IntPtr e, IntPtr localMonitor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalRendererSelectAdvancedNative(IntPtr e, IntPtr localRenderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalRendererUnselectAdvancedNative(IntPtr e, IntPtr localRenderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalSpeakerSelectAdvancedNative(IntPtr e, IntPtr localSpeaker);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalSpeakerUnselectAdvancedNative(IntPtr e, IntPtr localSpeaker);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalWindowShareSelectAdvancedNative(IntPtr e, IntPtr localWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointLocalWindowShareUnselectAdvancedNative(IntPtr e, IntPtr localWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalCameraEventListenerNative(IntPtr e, OnLocalCameraAdded onAdded, OnLocalCameraRemoved onRemoved, OnLocalCameraSelected onSelected, OnLocalCameraStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalCameraFrameListenerNative(IntPtr e, IntPtr localCamera, OnLocalCameraFrame onFrame, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalMicrophoneEnergyListenerNative(IntPtr e, OnLocalMicrophoneEnergy onEnergy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalMicrophoneEventListenerNative(IntPtr e, OnLocalMicrophoneAdded onAdded, OnLocalMicrophoneRemoved onRemoved, OnLocalMicrophoneSelected onSelected, OnLocalMicrophoneStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalMicrophoneFrameListenerNative(IntPtr e, IntPtr localMicrophone, OnLocalMicrophoneFrame onFrame);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalMonitorEventListenerNative(IntPtr e, OnLocalMonitorAdded onAdded, OnLocalMonitorRemoved onRemoved, OnLocalMonitorSelected onSelected, OnLocalMonitorStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalMonitorFrameListenerNative(IntPtr e, IntPtr localMonitor, OnLocalMonitorFrame onFrame, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalRendererEventListenerNative(IntPtr e, OnLocalRendererAdded onAdded, OnLocalRendererRemoved onRemoved, OnLocalRendererSelected onSelected, OnLocalRendererStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalSpeakerEventListenerNative(IntPtr e, OnLocalSpeakerAdded onAdded, OnLocalSpeakerRemoved onRemoved, OnLocalSpeakerSelected onSelected, OnLocalSpeakerStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalWindowShareEventListenerNative(IntPtr e, OnLocalWindowShareAdded onAdded, OnLocalWindowShareRemoved onRemoved, OnLocalWindowShareSelected onSelected, OnLocalWindowShareStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLocalWindowShareFrameListenerNative(IntPtr e, IntPtr localWindowShare, OnLocalWindowShareFrame onFrame, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterLogEventListenerNative(IntPtr e, OnLog onLog, IntPtr filter);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterNetworkInterfaceEventListenerNative(IntPtr e, OnNetworkInterfaceAdded onAdded, OnNetworkInterfaceRemoved onRemoved, OnNetworkInterfaceSelected onSelected, OnNetworkInterfaceStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteCameraEventListenerNative(IntPtr e, OnRemoteCameraAdded onAdded, OnRemoteCameraRemoved onRemoved, OnRemoteCameraStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteCameraFrameListenerNative(IntPtr e, IntPtr remoteCamera, OnRemoteCameraFrame onFrame, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteMicrophoneEnergyListenerNative(IntPtr e, OnRemoteMicrophoneEnergy onEnergy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteMicrophoneEventListenerNative(IntPtr e, OnRemoteMicrophoneAdded onAdded, OnRemoteMicrophoneRemoved onRemoved, OnRemoteMicrophoneStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteMicrophoneFrameListenerNative(IntPtr e, IntPtr remoteMicrophone, OnRemoteMicrophoneFrame onFrame);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteRendererEventListenerNative(IntPtr e, OnRemoteRendererAdded onAdded, OnRemoteRendererRemoved onRemoved);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteSpeakerEventListenerNative(IntPtr e, OnRemoteSpeakerAdded onAdded, OnRemoteSpeakerRemoved onRemoved);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteWindowShareEventListenerNative(IntPtr e, OnRemoteWindowShareAdded onAdded, OnRemoteWindowShareRemoved onRemoved, OnRemoteWindowShareStateUpdated onStateUpdated);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointRegisterRemoteWindowShareFrameListenerNative(IntPtr e, IntPtr remoteWindowShare, OnRemoteWindowShareFrame onFrame, uint width, uint height, ulong frameInterval);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointRemoveRendererNative(IntPtr e, IntPtr localRenderer);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectAudioContentShareNative(IntPtr e, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectDefaultCameraNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectDefaultMicrophoneNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectDefaultNetworkInterfaceForMediaNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectDefaultNetworkInterfaceForSignalingNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectDefaultSpeakerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectLocalCameraNative(IntPtr e, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectLocalMicrophoneNative(IntPtr e, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectLocalMonitorNative(IntPtr e, IntPtr localMonitor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectLocalSpeakerNative(IntPtr e, IntPtr localSpeaker);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectLocalWindowShareNative(IntPtr e, IntPtr localWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectNetworkInterfaceForMediaNative(IntPtr e, IntPtr networkInterface);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectNetworkInterfaceForSignalingNative(IntPtr e, IntPtr networkInterface);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectVideoContentShareNative(IntPtr e, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSelectVirtualWindowShareNative(IntPtr e, IntPtr virtualWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetAdvancedOptionsNative(IntPtr e, IntPtr options);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetApplicationTagNative(IntPtr e, IntPtr applicationTag);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetCameraNudgeConfigurationNative(IntPtr e, IntPtr cameraNudgeConfig);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetCameraPrivacyNative(IntPtr e, Boolean privacy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetConsoleLoggerFilterNative(IntPtr e, IntPtr consoleLogFilter);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetConsoleLoggerLevelAndCategoryNative(IntPtr e, IntPtr levelName, IntPtr categoryName, Boolean on);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetConsoleLoggerUTCNative(IntPtr e, Boolean utc);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetCpuTradeOffProfileNative(IntPtr e, [MarshalAs(UnmanagedType.I4)]EndpointTradeOffProfile profile);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetDebugFilterNative(IntPtr e, IntPtr debugLogFilter);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetFileLoggerFilterNative(IntPtr e, IntPtr logFileFilter);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetFileLoggerLevelAndCategoryNative(IntPtr e, IntPtr levelName, IntPtr categoryName, Boolean on);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetFileLoggerRotationParametersNative(IntPtr e, ulong maxSize, ulong wrapPeriod, ulong wrapCount);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetFileLoggerUTCNative(IntPtr e, Boolean utc);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetFontFileNameNative(IntPtr e, IntPtr fontFileName);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetLicenseKeyNative(IntPtr e, IntPtr licenseKey);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetLocationNative(IntPtr e, double latitude, double longitude);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointSetMaxBitRateNative(IntPtr e, uint bitRate);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetMicrophonePrivacyNative(IntPtr e, Boolean privacy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetModeNative(IntPtr e, [MarshalAs(UnmanagedType.I4)]EndpointMode mode);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetPoolNative(IntPtr e, IntPtr name);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetPreviewNative(IntPtr e, Boolean preview);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetProductInfoNative(IntPtr e, IntPtr productInfo, IntPtr supportedFeature);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetSpeakerPrivacyNative(IntPtr e, Boolean privacy);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetTURNAddressCredentialsNative(IntPtr e, IntPtr turnAddress, uint port, IntPtr username, IntPtr password, [MarshalAs(UnmanagedType.I4)]EndpointBaseTransportType baseTransport);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetTURNServerCertificateRequiredNative(IntPtr e, Boolean required);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetViewAnimationSpeedNative(IntPtr e, ref IntPtr viewId, uint speedPercentage);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointSetViewBackgroundColorNative(IntPtr e, ref IntPtr viewId, byte red, byte green, byte blue);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointShowAudioMetersNative(IntPtr e, ref IntPtr viewId, Boolean showMeters);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointShowPreviewNative(IntPtr e, Boolean preview);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointShowViewAtNative(IntPtr e, ref IntPtr viewId, int x, int y, uint width, uint height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointShowViewAtPointsNative(IntPtr e, ref IntPtr viewId, int x, int y, uint width, uint height);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointShowViewLabelNative(IntPtr e, ref IntPtr viewId, Boolean showLabel);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointShowWindowSharePreviewNative(IntPtr e, Boolean preview);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointStartLocalCameraDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointStartLocalMicrophoneDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointStartLocalMonitorDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointStartLocalSpeakerDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointStartLocalWindowShareDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointStartLocationDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointStopLocalCameraDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointStopLocalMicrophoneDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointStopLocalMonitorDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointStopLocalSpeakerDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointStopLocalWindowShareDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointStopLocationDetectionNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalCameraEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalCameraFrameListenerNative(IntPtr e, IntPtr localCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalMicrophoneEnergyListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalMicrophoneEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalMicrophoneFrameListenerNative(IntPtr e, IntPtr localMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalMonitorEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalMonitorFrameListenerNative(IntPtr e, IntPtr localMonitor);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalRendererEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalSpeakerEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalWindowShareEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLocalWindowShareFrameListenerNative(IntPtr e, IntPtr localWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterLogEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterNetworkInterfaceEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteCameraEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteCameraFrameListenerNative(IntPtr e, IntPtr remoteCamera);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteMicrophoneEnergyListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteMicrophoneEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteMicrophoneFrameListenerNative(IntPtr e, IntPtr remoteMicrophone);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteRendererEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteSpeakerEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteWindowShareEventListenerNative(IntPtr e);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointUnregisterRemoteWindowShareFrameListenerNative(IntPtr e, IntPtr remoteWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoEndpointValidateLicenseKeyNative(IntPtr e, IntPtr licenseKey, IntPtr userName);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointVirtualWindowShareSelectAdvancedNative(IntPtr e, IntPtr virtualWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoEndpointVirtualWindowShareUnselectAdvancedNative(IntPtr e, IntPtr virtualWindowShare);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoEndpointGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoEndpointSetUserDataNative(IntPtr obj, IntPtr userData);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraAdded(IntPtr e, IntPtr localCamera);
		private static OnLocalCameraAdded _mOnLocalCameraAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraFrame(IntPtr e, IntPtr localCamera, IntPtr videoFrame);
		private static OnLocalCameraFrame _mOnLocalCameraFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraRemoved(IntPtr e, IntPtr localCamera);
		private static OnLocalCameraRemoved _mOnLocalCameraRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraSelected(IntPtr e, IntPtr localCamera);
		private static OnLocalCameraSelected _mOnLocalCameraSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalCameraStateUpdated(IntPtr e, IntPtr localCamera, Device.DeviceState state);
		private static OnLocalCameraStateUpdated _mOnLocalCameraStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneAdded(IntPtr e, IntPtr localMicrophone);
		private static OnLocalMicrophoneAdded _mOnLocalMicrophoneAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneEnergy(IntPtr e, IntPtr localMicrophone, int audioEnergy);
		private static OnLocalMicrophoneEnergy _mOnLocalMicrophoneEnergy;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneFrame(IntPtr e, IntPtr localMicrophone, IntPtr audioFrame);
		private static OnLocalMicrophoneFrame _mOnLocalMicrophoneFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneRemoved(IntPtr e, IntPtr localMicrophone);
		private static OnLocalMicrophoneRemoved _mOnLocalMicrophoneRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneSelected(IntPtr e, IntPtr localMicrophone);
		private static OnLocalMicrophoneSelected _mOnLocalMicrophoneSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMicrophoneStateUpdated(IntPtr e, IntPtr localMicrophone, Device.DeviceState state);
		private static OnLocalMicrophoneStateUpdated _mOnLocalMicrophoneStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorAdded(IntPtr e, IntPtr localMonitor);
		private static OnLocalMonitorAdded _mOnLocalMonitorAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorFrame(IntPtr e, IntPtr localMonitor, IntPtr videoFrame);
		private static OnLocalMonitorFrame _mOnLocalMonitorFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorRemoved(IntPtr e, IntPtr localMonitor);
		private static OnLocalMonitorRemoved _mOnLocalMonitorRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorSelected(IntPtr e, IntPtr localMonitor);
		private static OnLocalMonitorSelected _mOnLocalMonitorSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalMonitorStateUpdated(IntPtr e, IntPtr localMonitor, Device.DeviceState state);
		private static OnLocalMonitorStateUpdated _mOnLocalMonitorStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalRendererAdded(IntPtr e, IntPtr localRenderer);
		private static OnLocalRendererAdded _mOnLocalRendererAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalRendererRemoved(IntPtr e, IntPtr localRenderer);
		private static OnLocalRendererRemoved _mOnLocalRendererRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalRendererSelected(IntPtr e, IntPtr localRenderer);
		private static OnLocalRendererSelected _mOnLocalRendererSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalRendererStateUpdated(IntPtr e, IntPtr localRenderer, Device.DeviceState state);
		private static OnLocalRendererStateUpdated _mOnLocalRendererStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalSpeakerAdded(IntPtr e, IntPtr localSpeaker);
		private static OnLocalSpeakerAdded _mOnLocalSpeakerAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalSpeakerRemoved(IntPtr e, IntPtr localSpeaker);
		private static OnLocalSpeakerRemoved _mOnLocalSpeakerRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalSpeakerSelected(IntPtr e, IntPtr localSpeaker);
		private static OnLocalSpeakerSelected _mOnLocalSpeakerSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalSpeakerStateUpdated(IntPtr e, IntPtr localSpeaker, Device.DeviceState state);
		private static OnLocalSpeakerStateUpdated _mOnLocalSpeakerStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareAdded(IntPtr e, IntPtr localWindowShare);
		private static OnLocalWindowShareAdded _mOnLocalWindowShareAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareFrame(IntPtr e, IntPtr localWindowShare, IntPtr videoFrame);
		private static OnLocalWindowShareFrame _mOnLocalWindowShareFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareRemoved(IntPtr e, IntPtr localWindowShare);
		private static OnLocalWindowShareRemoved _mOnLocalWindowShareRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareSelected(IntPtr e, IntPtr localWindowShare);
		private static OnLocalWindowShareSelected _mOnLocalWindowShareSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLocalWindowShareStateUpdated(IntPtr e, IntPtr localWindowShare, Device.DeviceState state);
		private static OnLocalWindowShareStateUpdated _mOnLocalWindowShareStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLog(IntPtr e, IntPtr logRecord);
		private static OnLog _mOnLog;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnLogCompressionComplete(IntPtr e, IntPtr compressedFileName, EndpointLogCompressionResult result);
		private static OnLogCompressionComplete _mOnLogCompressionComplete;
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoEndpointOnLogCompressionCompleteGetcompressedFileNameCStr(IntPtr compressedFileName);

		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnNetworkInterfaceAdded(IntPtr e, IntPtr networkInterface);
		private static OnNetworkInterfaceAdded _mOnNetworkInterfaceAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnNetworkInterfaceRemoved(IntPtr e, IntPtr networkInterface);
		private static OnNetworkInterfaceRemoved _mOnNetworkInterfaceRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnNetworkInterfaceSelected(IntPtr e, IntPtr networkInterface, NetworkInterface.NetworkInterfaceTransportType transportType);
		private static OnNetworkInterfaceSelected _mOnNetworkInterfaceSelected;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnNetworkInterfaceStateUpdated(IntPtr e, IntPtr networkInterface, NetworkInterface.NetworkInterfaceState state);
		private static OnNetworkInterfaceStateUpdated _mOnNetworkInterfaceStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteCameraAdded(IntPtr e, IntPtr remoteCamera, IntPtr user, IntPtr call, IntPtr room, IntPtr participant);
		private static OnRemoteCameraAdded _mOnRemoteCameraAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteCameraFrame(IntPtr e, IntPtr remoteCamera, IntPtr participant, IntPtr videoFrame);
		private static OnRemoteCameraFrame _mOnRemoteCameraFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteCameraRemoved(IntPtr e, IntPtr remoteCamera, IntPtr user, IntPtr call, IntPtr room, IntPtr participant);
		private static OnRemoteCameraRemoved _mOnRemoteCameraRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteCameraStateUpdated(IntPtr e, IntPtr remoteCamera, IntPtr user, IntPtr call, IntPtr room, IntPtr participant, Device.DeviceState state);
		private static OnRemoteCameraStateUpdated _mOnRemoteCameraStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneAdded(IntPtr e, IntPtr remoteMicrophone, IntPtr user, IntPtr call, IntPtr room, IntPtr participant);
		private static OnRemoteMicrophoneAdded _mOnRemoteMicrophoneAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneEnergy(IntPtr e, IntPtr remoteMicrophone, IntPtr participant, int audioEnergy);
		private static OnRemoteMicrophoneEnergy _mOnRemoteMicrophoneEnergy;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneFrame(IntPtr e, IntPtr remoteMicrophone, IntPtr participant, IntPtr audioFrame);
		private static OnRemoteMicrophoneFrame _mOnRemoteMicrophoneFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneRemoved(IntPtr e, IntPtr remoteMicrophone, IntPtr user, IntPtr call, IntPtr room, IntPtr participant);
		private static OnRemoteMicrophoneRemoved _mOnRemoteMicrophoneRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteMicrophoneStateUpdated(IntPtr e, IntPtr remoteMicrophone, IntPtr user, IntPtr call, IntPtr room, IntPtr participant, Device.DeviceState state);
		private static OnRemoteMicrophoneStateUpdated _mOnRemoteMicrophoneStateUpdated;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteRendererAdded(IntPtr e, IntPtr remoteRenderer, IntPtr user, IntPtr call, IntPtr room);
		private static OnRemoteRendererAdded _mOnRemoteRendererAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteRendererRemoved(IntPtr e, IntPtr remoteRenderer, IntPtr user, IntPtr call, IntPtr room);
		private static OnRemoteRendererRemoved _mOnRemoteRendererRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteSpeakerAdded(IntPtr e, IntPtr remoteSpeaker, IntPtr user, IntPtr call, IntPtr room);
		private static OnRemoteSpeakerAdded _mOnRemoteSpeakerAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteSpeakerRemoved(IntPtr e, IntPtr remoteSpeaker, IntPtr user, IntPtr call, IntPtr room);
		private static OnRemoteSpeakerRemoved _mOnRemoteSpeakerRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteWindowShareAdded(IntPtr e, IntPtr remoteWindowShare, IntPtr user, IntPtr call, IntPtr room, IntPtr participant);
		private static OnRemoteWindowShareAdded _mOnRemoteWindowShareAdded;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteWindowShareFrame(IntPtr e, IntPtr remoteWindowShare, IntPtr participant, IntPtr videoFrame);
		private static OnRemoteWindowShareFrame _mOnRemoteWindowShareFrame;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteWindowShareRemoved(IntPtr e, IntPtr remoteWindowShare, IntPtr user, IntPtr call, IntPtr room, IntPtr participant);
		private static OnRemoteWindowShareRemoved _mOnRemoteWindowShareRemoved;
		[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
		private delegate void OnRemoteWindowShareStateUpdated(IntPtr e, IntPtr remoteWindowShare, IntPtr user, IntPtr call, IntPtr room, IntPtr participant, Device.DeviceState state);
		private static OnRemoteWindowShareStateUpdated _mOnRemoteWindowShareStateUpdated;
		public enum ClientAppLogLevel{
			ClientapploglevelInfo,
			ClientapploglevelDebug,
			ClientapploglevelWarning,
			ClientapploglevelError
		}
		public enum EndpointBaseTransportType{
			EndpointbasetransporttypeTLS,
			EndpointbasetransporttypeTCP,
			EndpointbasetransporttypeUDP
		}
		public enum EndpointLogCompressionResult{
			EndpointlogcompressionresultSuccess,
			EndpointlogcompressionresultMiscError
		}
		public enum EndpointMediaState{
			EndpointmediastateIdle,
			EndpointmediastateGreenRoom,
			EndpointmediastateLive
		}
		public enum EndpointMode{
			EndpointmodeDefault,
			EndpointmodeForeground,
			EndpointmodeBackground
		}
		public enum EndpointTone{
			EndpointtoneJoin,
			EndpointtoneLeave,
			EndpointtoneMsgRecv,
			EndpointtoneMsgSend,
			EndpointtoneRing,
			EndpointtoneMax
		}
		public enum EndpointTradeOffProfile{
			EndpointtradeoffprofileHigh,
			EndpointtradeoffprofileMedium,
			EndpointtradeoffprofileLow
		}
		public interface ICompressLogs{

			void OnLogCompressionComplete(String compressedFileName, EndpointLogCompressionResult result);
		}
		public interface IRegisterLocalCameraEventListener{

			void OnLocalCameraAdded(LocalCamera localCamera);
			void OnLocalCameraRemoved(LocalCamera localCamera);
			void OnLocalCameraSelected(LocalCamera localCamera);
			void OnLocalCameraStateUpdated(LocalCamera localCamera, Device.DeviceState state);
		}
		public interface IRegisterLocalCameraFrameListener{

			void OnLocalCameraFrame(LocalCamera localCamera, VideoFrame videoFrame);
		}
		public interface IRegisterLocalMicrophoneEnergyListener{

			void OnLocalMicrophoneEnergy(LocalMicrophone localMicrophone, int audioEnergy);
		}
		public interface IRegisterLocalMicrophoneEventListener{

			void OnLocalMicrophoneAdded(LocalMicrophone localMicrophone);
			void OnLocalMicrophoneRemoved(LocalMicrophone localMicrophone);
			void OnLocalMicrophoneSelected(LocalMicrophone localMicrophone);
			void OnLocalMicrophoneStateUpdated(LocalMicrophone localMicrophone, Device.DeviceState state);
		}
		public interface IRegisterLocalMicrophoneFrameListener{

			void OnLocalMicrophoneFrame(LocalMicrophone localMicrophone, AudioFrame audioFrame);
		}
		public interface IRegisterLocalMonitorEventListener{

			void OnLocalMonitorAdded(LocalMonitor localMonitor);
			void OnLocalMonitorRemoved(LocalMonitor localMonitor);
			void OnLocalMonitorSelected(LocalMonitor localMonitor);
			void OnLocalMonitorStateUpdated(LocalMonitor localMonitor, Device.DeviceState state);
		}
		public interface IRegisterLocalMonitorFrameListener{

			void OnLocalMonitorFrame(LocalMonitor localMonitor, VideoFrame videoFrame);
		}
		public interface IRegisterLocalRendererEventListener{

			void OnLocalRendererAdded(LocalRenderer localRenderer);
			void OnLocalRendererRemoved(LocalRenderer localRenderer);
			void OnLocalRendererSelected(LocalRenderer localRenderer);
			void OnLocalRendererStateUpdated(LocalRenderer localRenderer, Device.DeviceState state);
		}
		public interface IRegisterLocalSpeakerEventListener{

			void OnLocalSpeakerAdded(LocalSpeaker localSpeaker);
			void OnLocalSpeakerRemoved(LocalSpeaker localSpeaker);
			void OnLocalSpeakerSelected(LocalSpeaker localSpeaker);
			void OnLocalSpeakerStateUpdated(LocalSpeaker localSpeaker, Device.DeviceState state);
		}
		public interface IRegisterLocalWindowShareEventListener{

			void OnLocalWindowShareAdded(LocalWindowShare localWindowShare);
			void OnLocalWindowShareRemoved(LocalWindowShare localWindowShare);
			void OnLocalWindowShareSelected(LocalWindowShare localWindowShare);
			void OnLocalWindowShareStateUpdated(LocalWindowShare localWindowShare, Device.DeviceState state);
		}
		public interface IRegisterLocalWindowShareFrameListener{

			void OnLocalWindowShareFrame(LocalWindowShare localWindowShare, VideoFrame videoFrame);
		}
		public interface IRegisterLogEventListener{

			void OnLog(LogRecord logRecord);
		}
		public interface IRegisterNetworkInterfaceEventListener{

			void OnNetworkInterfaceAdded(NetworkInterface networkInterface);
			void OnNetworkInterfaceRemoved(NetworkInterface networkInterface);
			void OnNetworkInterfaceSelected(NetworkInterface networkInterface, NetworkInterface.NetworkInterfaceTransportType transportType);
			void OnNetworkInterfaceStateUpdated(NetworkInterface networkInterface, NetworkInterface.NetworkInterfaceState state);
		}
		public interface IRegisterRemoteCameraEventListener{

			void OnRemoteCameraAdded(RemoteCamera remoteCamera, User user, Call call, Room room, Participant participant);
			void OnRemoteCameraRemoved(RemoteCamera remoteCamera, User user, Call call, Room room, Participant participant);
			void OnRemoteCameraStateUpdated(RemoteCamera remoteCamera, User user, Call call, Room room, Participant participant, Device.DeviceState state);
		}
		public interface IRegisterRemoteCameraFrameListener{

			void OnRemoteCameraFrame(RemoteCamera remoteCamera, Participant participant, VideoFrame videoFrame);
		}
		public interface IRegisterRemoteMicrophoneEnergyListener{

			void OnRemoteMicrophoneEnergy(RemoteMicrophone remoteMicrophone, Participant participant, int audioEnergy);
		}
		public interface IRegisterRemoteMicrophoneEventListener{

			void OnRemoteMicrophoneAdded(RemoteMicrophone remoteMicrophone, User user, Call call, Room room, Participant participant);
			void OnRemoteMicrophoneRemoved(RemoteMicrophone remoteMicrophone, User user, Call call, Room room, Participant participant);
			void OnRemoteMicrophoneStateUpdated(RemoteMicrophone remoteMicrophone, User user, Call call, Room room, Participant participant, Device.DeviceState state);
		}
		public interface IRegisterRemoteMicrophoneFrameListener{

			void OnRemoteMicrophoneFrame(RemoteMicrophone remoteMicrophone, Participant participant, AudioFrame audioFrame);
		}
		public interface IRegisterRemoteRendererEventListener{

			void OnRemoteRendererAdded(RemoteRenderer remoteRenderer, User user, Call call, Room room);
			void OnRemoteRendererRemoved(RemoteRenderer remoteRenderer, User user, Call call, Room room);
		}
		public interface IRegisterRemoteSpeakerEventListener{

			void OnRemoteSpeakerAdded(RemoteSpeaker remoteSpeaker, User user, Call call, Room room);
			void OnRemoteSpeakerRemoved(RemoteSpeaker remoteSpeaker, User user, Call call, Room room);
		}
		public interface IRegisterRemoteWindowShareEventListener{

			void OnRemoteWindowShareAdded(RemoteWindowShare remoteWindowShare, User user, Call call, Room room, Participant participant);
			void OnRemoteWindowShareRemoved(RemoteWindowShare remoteWindowShare, User user, Call call, Room room, Participant participant);
			void OnRemoteWindowShareStateUpdated(RemoteWindowShare remoteWindowShare, User user, Call call, Room room, Participant participant, Device.DeviceState state);
		}
		public interface IRegisterRemoteWindowShareFrameListener{

			void OnRemoteWindowShareFrame(RemoteWindowShare remoteWindowShare, Participant participant, VideoFrame videoFrame);
		}
		private static ICompressLogs _mICompressLogs;
		private static IRegisterLocalCameraEventListener _mIRegisterLocalCameraEventListener;
		private static IRegisterLocalCameraFrameListener _mIRegisterLocalCameraFrameListener;
		private static IRegisterLocalMicrophoneEnergyListener _mIRegisterLocalMicrophoneEnergyListener;
		private static IRegisterLocalMicrophoneEventListener _mIRegisterLocalMicrophoneEventListener;
		private static IRegisterLocalMicrophoneFrameListener _mIRegisterLocalMicrophoneFrameListener;
		private static IRegisterLocalMonitorEventListener _mIRegisterLocalMonitorEventListener;
		private static IRegisterLocalMonitorFrameListener _mIRegisterLocalMonitorFrameListener;
		private static IRegisterLocalRendererEventListener _mIRegisterLocalRendererEventListener;
		private static IRegisterLocalSpeakerEventListener _mIRegisterLocalSpeakerEventListener;
		private static IRegisterLocalWindowShareEventListener _mIRegisterLocalWindowShareEventListener;
		private static IRegisterLocalWindowShareFrameListener _mIRegisterLocalWindowShareFrameListener;
		private static IRegisterLogEventListener _mIRegisterLogEventListener;
		private static IRegisterNetworkInterfaceEventListener _mIRegisterNetworkInterfaceEventListener;
		private static IRegisterRemoteCameraEventListener _mIRegisterRemoteCameraEventListener;
		private static IRegisterRemoteCameraFrameListener _mIRegisterRemoteCameraFrameListener;
		private static IRegisterRemoteMicrophoneEnergyListener _mIRegisterRemoteMicrophoneEnergyListener;
		private static IRegisterRemoteMicrophoneEventListener _mIRegisterRemoteMicrophoneEventListener;
		private static IRegisterRemoteMicrophoneFrameListener _mIRegisterRemoteMicrophoneFrameListener;
		private static IRegisterRemoteRendererEventListener _mIRegisterRemoteRendererEventListener;
		private static IRegisterRemoteSpeakerEventListener _mIRegisterRemoteSpeakerEventListener;
		private static IRegisterRemoteWindowShareEventListener _mIRegisterRemoteWindowShareEventListener;
		private static IRegisterRemoteWindowShareFrameListener _mIRegisterRemoteWindowShareFrameListener;
		public Endpoint(IntPtr viewId, LocalRenderer.LocalRendererViewStyle viewStyle, uint remoteParticipants, String consoleLogFilter, String logFileFilter, String logFileName){

			IntPtr nConsoleLogFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(consoleLogFilter ?? string.Empty);
			IntPtr nLogFileFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFileFilter ?? string.Empty);
			IntPtr nLogFileName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFileName ?? string.Empty);
			objPtr = VidyoEndpointConstructNative(ref viewId, viewStyle, remoteParticipants, nConsoleLogFilter, nLogFileFilter, nLogFileName);
			Marshal.FreeHGlobal(nLogFileName);
			Marshal.FreeHGlobal(nLogFileFilter);
			Marshal.FreeHGlobal(nConsoleLogFilter);
			VidyoEndpointSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		public Endpoint(IntPtr other){
			objPtr = VidyoEndpointConstructCopyNative(other);
			VidyoEndpointSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~Endpoint(){
			if(objPtr != IntPtr.Zero){
				VidyoEndpointSetUserDataNative(objPtr, IntPtr.Zero);
				VidyoEndpointDestructNative(objPtr);
			}
		}
		public void AppLog(ClientAppLogLevel logLevel, String logMsg){

			IntPtr nLogMsg = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logMsg ?? string.Empty);
			VidyoEndpointAppLogNative(objPtr, logLevel, nLogMsg);
			Marshal.FreeHGlobal(nLogMsg);
		}
		public Boolean AssignViewToCompositeRenderer(IntPtr viewId, LocalRenderer.LocalRendererViewStyle viewStyle, uint remoteParticipants){

			Boolean ret = VidyoEndpointAssignViewToCompositeRendererNative(objPtr, ref viewId, viewStyle, remoteParticipants);

			return ret;
		}
		public Boolean AssignViewToLocalCamera(IntPtr viewId, LocalCamera localCamera, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoEndpointAssignViewToLocalCameraNative(objPtr, ref viewId, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToLocalMonitor(IntPtr viewId, LocalMonitor localMonitor, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoEndpointAssignViewToLocalMonitorNative(objPtr, ref viewId, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToLocalWindowShare(IntPtr viewId, LocalWindowShare localWindowShare, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoEndpointAssignViewToLocalWindowShareNative(objPtr, ref viewId, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToRemoteCamera(IntPtr viewId, RemoteCamera remoteCamera, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoEndpointAssignViewToRemoteCameraNative(objPtr, ref viewId, (remoteCamera != null) ? remoteCamera.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean AssignViewToRemoteWindowShare(IntPtr viewId, RemoteWindowShare remoteWindowShare, Boolean displayCropped, Boolean allowZoom){

			Boolean ret = VidyoEndpointAssignViewToRemoteWindowShareNative(objPtr, ref viewId, (remoteWindowShare != null) ? remoteWindowShare.GetObjectPtr():IntPtr.Zero, displayCropped, allowZoom);

			return ret;
		}
		public Boolean CompressLogs(String compressedFileName, ICompressLogs _iICompressLogs){
			_mICompressLogs = _iICompressLogs;
			_mOnLogCompressionComplete = OnLogCompressionCompleteDelegate;

			IntPtr nCompressedFileName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(compressedFileName ?? string.Empty);
			Boolean ret = VidyoEndpointCompressLogsNative(objPtr, nCompressedFileName, _mOnLogCompressionComplete);
			Marshal.FreeHGlobal(nCompressedFileName);

			return ret;
		}
		public Boolean CreateRenderer(LocalMonitor monitor, uint width, uint height){

			Boolean ret = VidyoEndpointCreateRendererNative(objPtr, (monitor != null) ? monitor.GetObjectPtr():IntPtr.Zero, width, height);

			return ret;
		}
		public Boolean CreateRendererFromViewId(IntPtr viewId, int x, int y, uint width, uint height){

			Boolean ret = VidyoEndpointCreateRendererFromViewIdNative(objPtr, ref viewId, x, y, width, height);

			return ret;
		}
		public Boolean CreateRendererMultiScreen(){

			Boolean ret = VidyoEndpointCreateRendererMultiScreenNative(objPtr);

			return ret;
		}
		public Boolean CycleCamera(){

			Boolean ret = VidyoEndpointCycleCameraNative(objPtr);

			return ret;
		}
		public Boolean CycleMicrophone(){

			Boolean ret = VidyoEndpointCycleMicrophoneNative(objPtr);

			return ret;
		}
		public Boolean CycleSpeaker(){

			Boolean ret = VidyoEndpointCycleSpeakerNative(objPtr);

			return ret;
		}
		public void Disable(){

			VidyoEndpointDisableNative(objPtr);
		}
		public void DisableDebug(){

			VidyoEndpointDisableDebugNative(objPtr);
		}
		public Boolean EnableDebug(uint port, String logFilter){

			IntPtr nLogFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFilter ?? string.Empty);
			Boolean ret = VidyoEndpointEnableDebugNative(objPtr, port, nLogFilter);
			Marshal.FreeHGlobal(nLogFilter);

			return ret;
		}
		public Boolean EnableFileLogger(String logFileName, String logFileFilter){

			IntPtr nLogFileName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFileName ?? string.Empty);
			IntPtr nLogFileFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFileFilter ?? string.Empty);
			Boolean ret = VidyoEndpointEnableFileLoggerNative(objPtr, nLogFileName, nLogFileFilter);
			Marshal.FreeHGlobal(nLogFileFilter);
			Marshal.FreeHGlobal(nLogFileName);

			return ret;
		}
		public String GetApplicationTag(){

			IntPtr ret = VidyoEndpointGetApplicationTagNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public EndpointTradeOffProfile GetCpuTradeOffProfile(){

			EndpointTradeOffProfile ret = VidyoEndpointGetCpuTradeOffProfileNative(objPtr);

			return ret;
		}
		public Boolean GetFileLoggerCategoryList(List<LoggerCategory> categories){

			IntPtr nCategories = IntPtr.Zero;

			Boolean ret = VidyoEndpointGetFileLoggerCategoryListNative(objPtr, nCategories);

			return ret;
		}
		public String GetId(){

			IntPtr ret = VidyoEndpointGetIdNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public Boolean GetProductInfo(List<Property> productInfo, List<Property> supportedFeature){

			IntPtr nProductInfo = IntPtr.Zero;

			IntPtr nSupportedFeature = IntPtr.Zero;

			Boolean ret = VidyoEndpointGetProductInfoNative(objPtr, nProductInfo, nSupportedFeature);

			return ret;
		}
		public EndpointStats GetStats(){

			IntPtr ret = VidyoEndpointGetStatsNative(objPtr);
			EndpointStats csRet = new EndpointStats(ret);

			return csRet;
		}
		public String GetStatsJson(){

			IntPtr ret = VidyoEndpointGetStatsJsonNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public Boolean HideView(IntPtr viewId){

			Boolean ret = VidyoEndpointHideViewNative(objPtr, ref viewId);

			return ret;
		}
		public Boolean IsDebugEnabled(){

			Boolean ret = VidyoEndpointIsDebugEnabledNative(objPtr);

			return ret;
		}
		public void LocalCameraSelectAdvanced(LocalCamera localCamera){

			VidyoEndpointLocalCameraSelectAdvancedNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalCameraUnselectAdvanced(LocalCamera localCamera){

			VidyoEndpointLocalCameraUnselectAdvancedNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalMicrophoneSelectAdvanced(LocalMicrophone localMicrophone, Boolean previewedPreCall){

			VidyoEndpointLocalMicrophoneSelectAdvancedNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero, previewedPreCall);
		}
		public void LocalMicrophoneUnselectAdvanced(LocalMicrophone localMicrophone){

			VidyoEndpointLocalMicrophoneUnselectAdvancedNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalMonitorSelectAdvanced(LocalMonitor localMonitor){

			VidyoEndpointLocalMonitorSelectAdvancedNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalMonitorUnselectAdvanced(LocalMonitor localMonitor){

			VidyoEndpointLocalMonitorUnselectAdvancedNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalRendererSelectAdvanced(LocalRenderer localRenderer){

			VidyoEndpointLocalRendererSelectAdvancedNative(objPtr, (localRenderer != null) ? localRenderer.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalRendererUnselectAdvanced(LocalRenderer localRenderer){

			VidyoEndpointLocalRendererUnselectAdvancedNative(objPtr, (localRenderer != null) ? localRenderer.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalSpeakerSelectAdvanced(LocalSpeaker localSpeaker){

			VidyoEndpointLocalSpeakerSelectAdvancedNative(objPtr, (localSpeaker != null) ? localSpeaker.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalSpeakerUnselectAdvanced(LocalSpeaker localSpeaker){

			VidyoEndpointLocalSpeakerUnselectAdvancedNative(objPtr, (localSpeaker != null) ? localSpeaker.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalWindowShareSelectAdvanced(LocalWindowShare localWindowShare){

			VidyoEndpointLocalWindowShareSelectAdvancedNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero);
		}
		public void LocalWindowShareUnselectAdvanced(LocalWindowShare localWindowShare){

			VidyoEndpointLocalWindowShareUnselectAdvancedNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero);
		}
		public Boolean RegisterLocalCameraEventListener(IRegisterLocalCameraEventListener _iIRegisterLocalCameraEventListener){
			_mIRegisterLocalCameraEventListener = _iIRegisterLocalCameraEventListener;
			_mOnLocalCameraAdded = OnLocalCameraAddedDelegate;
			_mOnLocalCameraRemoved = OnLocalCameraRemovedDelegate;
			_mOnLocalCameraSelected = OnLocalCameraSelectedDelegate;
			_mOnLocalCameraStateUpdated = OnLocalCameraStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterLocalCameraEventListenerNative(objPtr, _mOnLocalCameraAdded, _mOnLocalCameraRemoved, _mOnLocalCameraSelected, _mOnLocalCameraStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalCameraFrameListener(LocalCamera localCamera, IRegisterLocalCameraFrameListener _iIRegisterLocalCameraFrameListener, uint width, uint height, ulong frameInterval){
			_mIRegisterLocalCameraFrameListener = _iIRegisterLocalCameraFrameListener;
			_mOnLocalCameraFrame = OnLocalCameraFrameDelegate;

			Boolean ret = VidyoEndpointRegisterLocalCameraFrameListenerNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero, _mOnLocalCameraFrame, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterLocalMicrophoneEnergyListener(IRegisterLocalMicrophoneEnergyListener _iIRegisterLocalMicrophoneEnergyListener){
			_mIRegisterLocalMicrophoneEnergyListener = _iIRegisterLocalMicrophoneEnergyListener;
			_mOnLocalMicrophoneEnergy = OnLocalMicrophoneEnergyDelegate;

			Boolean ret = VidyoEndpointRegisterLocalMicrophoneEnergyListenerNative(objPtr, _mOnLocalMicrophoneEnergy);

			return ret;
		}
		public Boolean RegisterLocalMicrophoneEventListener(IRegisterLocalMicrophoneEventListener _iIRegisterLocalMicrophoneEventListener){
			_mIRegisterLocalMicrophoneEventListener = _iIRegisterLocalMicrophoneEventListener;
			_mOnLocalMicrophoneAdded = OnLocalMicrophoneAddedDelegate;
			_mOnLocalMicrophoneRemoved = OnLocalMicrophoneRemovedDelegate;
			_mOnLocalMicrophoneSelected = OnLocalMicrophoneSelectedDelegate;
			_mOnLocalMicrophoneStateUpdated = OnLocalMicrophoneStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterLocalMicrophoneEventListenerNative(objPtr, _mOnLocalMicrophoneAdded, _mOnLocalMicrophoneRemoved, _mOnLocalMicrophoneSelected, _mOnLocalMicrophoneStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalMicrophoneFrameListener(LocalMicrophone localMicrophone, IRegisterLocalMicrophoneFrameListener _iIRegisterLocalMicrophoneFrameListener){
			_mIRegisterLocalMicrophoneFrameListener = _iIRegisterLocalMicrophoneFrameListener;
			_mOnLocalMicrophoneFrame = OnLocalMicrophoneFrameDelegate;

			Boolean ret = VidyoEndpointRegisterLocalMicrophoneFrameListenerNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero, _mOnLocalMicrophoneFrame);

			return ret;
		}
		public Boolean RegisterLocalMonitorEventListener(IRegisterLocalMonitorEventListener _iIRegisterLocalMonitorEventListener){
			_mIRegisterLocalMonitorEventListener = _iIRegisterLocalMonitorEventListener;
			_mOnLocalMonitorAdded = OnLocalMonitorAddedDelegate;
			_mOnLocalMonitorRemoved = OnLocalMonitorRemovedDelegate;
			_mOnLocalMonitorSelected = OnLocalMonitorSelectedDelegate;
			_mOnLocalMonitorStateUpdated = OnLocalMonitorStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterLocalMonitorEventListenerNative(objPtr, _mOnLocalMonitorAdded, _mOnLocalMonitorRemoved, _mOnLocalMonitorSelected, _mOnLocalMonitorStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalMonitorFrameListener(LocalMonitor localMonitor, IRegisterLocalMonitorFrameListener _iIRegisterLocalMonitorFrameListener, uint width, uint height, ulong frameInterval){
			_mIRegisterLocalMonitorFrameListener = _iIRegisterLocalMonitorFrameListener;
			_mOnLocalMonitorFrame = OnLocalMonitorFrameDelegate;

			Boolean ret = VidyoEndpointRegisterLocalMonitorFrameListenerNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero, _mOnLocalMonitorFrame, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterLocalRendererEventListener(IRegisterLocalRendererEventListener _iIRegisterLocalRendererEventListener){
			_mIRegisterLocalRendererEventListener = _iIRegisterLocalRendererEventListener;
			_mOnLocalRendererAdded = OnLocalRendererAddedDelegate;
			_mOnLocalRendererRemoved = OnLocalRendererRemovedDelegate;
			_mOnLocalRendererSelected = OnLocalRendererSelectedDelegate;
			_mOnLocalRendererStateUpdated = OnLocalRendererStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterLocalRendererEventListenerNative(objPtr, _mOnLocalRendererAdded, _mOnLocalRendererRemoved, _mOnLocalRendererSelected, _mOnLocalRendererStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalSpeakerEventListener(IRegisterLocalSpeakerEventListener _iIRegisterLocalSpeakerEventListener){
			_mIRegisterLocalSpeakerEventListener = _iIRegisterLocalSpeakerEventListener;
			_mOnLocalSpeakerAdded = OnLocalSpeakerAddedDelegate;
			_mOnLocalSpeakerRemoved = OnLocalSpeakerRemovedDelegate;
			_mOnLocalSpeakerSelected = OnLocalSpeakerSelectedDelegate;
			_mOnLocalSpeakerStateUpdated = OnLocalSpeakerStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterLocalSpeakerEventListenerNative(objPtr, _mOnLocalSpeakerAdded, _mOnLocalSpeakerRemoved, _mOnLocalSpeakerSelected, _mOnLocalSpeakerStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalWindowShareEventListener(IRegisterLocalWindowShareEventListener _iIRegisterLocalWindowShareEventListener){
			_mIRegisterLocalWindowShareEventListener = _iIRegisterLocalWindowShareEventListener;
			_mOnLocalWindowShareAdded = OnLocalWindowShareAddedDelegate;
			_mOnLocalWindowShareRemoved = OnLocalWindowShareRemovedDelegate;
			_mOnLocalWindowShareSelected = OnLocalWindowShareSelectedDelegate;
			_mOnLocalWindowShareStateUpdated = OnLocalWindowShareStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterLocalWindowShareEventListenerNative(objPtr, _mOnLocalWindowShareAdded, _mOnLocalWindowShareRemoved, _mOnLocalWindowShareSelected, _mOnLocalWindowShareStateUpdated);

			return ret;
		}
		public Boolean RegisterLocalWindowShareFrameListener(LocalWindowShare localWindowShare, IRegisterLocalWindowShareFrameListener _iIRegisterLocalWindowShareFrameListener, uint width, uint height, ulong frameInterval){
			_mIRegisterLocalWindowShareFrameListener = _iIRegisterLocalWindowShareFrameListener;
			_mOnLocalWindowShareFrame = OnLocalWindowShareFrameDelegate;

			Boolean ret = VidyoEndpointRegisterLocalWindowShareFrameListenerNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero, _mOnLocalWindowShareFrame, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterLogEventListener(IRegisterLogEventListener _iIRegisterLogEventListener, String filter){
			_mIRegisterLogEventListener = _iIRegisterLogEventListener;
			_mOnLog = OnLogDelegate;

			IntPtr nFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(filter ?? string.Empty);
			Boolean ret = VidyoEndpointRegisterLogEventListenerNative(objPtr, _mOnLog, nFilter);
			Marshal.FreeHGlobal(nFilter);

			return ret;
		}
		public Boolean RegisterNetworkInterfaceEventListener(IRegisterNetworkInterfaceEventListener _iIRegisterNetworkInterfaceEventListener){
			_mIRegisterNetworkInterfaceEventListener = _iIRegisterNetworkInterfaceEventListener;
			_mOnNetworkInterfaceAdded = OnNetworkInterfaceAddedDelegate;
			_mOnNetworkInterfaceRemoved = OnNetworkInterfaceRemovedDelegate;
			_mOnNetworkInterfaceSelected = OnNetworkInterfaceSelectedDelegate;
			_mOnNetworkInterfaceStateUpdated = OnNetworkInterfaceStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterNetworkInterfaceEventListenerNative(objPtr, _mOnNetworkInterfaceAdded, _mOnNetworkInterfaceRemoved, _mOnNetworkInterfaceSelected, _mOnNetworkInterfaceStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteCameraEventListener(IRegisterRemoteCameraEventListener _iIRegisterRemoteCameraEventListener){
			_mIRegisterRemoteCameraEventListener = _iIRegisterRemoteCameraEventListener;
			_mOnRemoteCameraAdded = OnRemoteCameraAddedDelegate;
			_mOnRemoteCameraRemoved = OnRemoteCameraRemovedDelegate;
			_mOnRemoteCameraStateUpdated = OnRemoteCameraStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteCameraEventListenerNative(objPtr, _mOnRemoteCameraAdded, _mOnRemoteCameraRemoved, _mOnRemoteCameraStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteCameraFrameListener(RemoteCamera remoteCamera, IRegisterRemoteCameraFrameListener _iIRegisterRemoteCameraFrameListener, uint width, uint height, ulong frameInterval){
			_mIRegisterRemoteCameraFrameListener = _iIRegisterRemoteCameraFrameListener;
			_mOnRemoteCameraFrame = OnRemoteCameraFrameDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteCameraFrameListenerNative(objPtr, (remoteCamera != null) ? remoteCamera.GetObjectPtr():IntPtr.Zero, _mOnRemoteCameraFrame, width, height, frameInterval);

			return ret;
		}
		public Boolean RegisterRemoteMicrophoneEnergyListener(IRegisterRemoteMicrophoneEnergyListener _iIRegisterRemoteMicrophoneEnergyListener){
			_mIRegisterRemoteMicrophoneEnergyListener = _iIRegisterRemoteMicrophoneEnergyListener;
			_mOnRemoteMicrophoneEnergy = OnRemoteMicrophoneEnergyDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteMicrophoneEnergyListenerNative(objPtr, _mOnRemoteMicrophoneEnergy);

			return ret;
		}
		public Boolean RegisterRemoteMicrophoneEventListener(IRegisterRemoteMicrophoneEventListener _iIRegisterRemoteMicrophoneEventListener){
			_mIRegisterRemoteMicrophoneEventListener = _iIRegisterRemoteMicrophoneEventListener;
			_mOnRemoteMicrophoneAdded = OnRemoteMicrophoneAddedDelegate;
			_mOnRemoteMicrophoneRemoved = OnRemoteMicrophoneRemovedDelegate;
			_mOnRemoteMicrophoneStateUpdated = OnRemoteMicrophoneStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteMicrophoneEventListenerNative(objPtr, _mOnRemoteMicrophoneAdded, _mOnRemoteMicrophoneRemoved, _mOnRemoteMicrophoneStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteMicrophoneFrameListener(RemoteMicrophone remoteMicrophone, IRegisterRemoteMicrophoneFrameListener _iIRegisterRemoteMicrophoneFrameListener){
			_mIRegisterRemoteMicrophoneFrameListener = _iIRegisterRemoteMicrophoneFrameListener;
			_mOnRemoteMicrophoneFrame = OnRemoteMicrophoneFrameDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteMicrophoneFrameListenerNative(objPtr, (remoteMicrophone != null) ? remoteMicrophone.GetObjectPtr():IntPtr.Zero, _mOnRemoteMicrophoneFrame);

			return ret;
		}
		public Boolean RegisterRemoteRendererEventListener(IRegisterRemoteRendererEventListener _iIRegisterRemoteRendererEventListener){
			_mIRegisterRemoteRendererEventListener = _iIRegisterRemoteRendererEventListener;
			_mOnRemoteRendererAdded = OnRemoteRendererAddedDelegate;
			_mOnRemoteRendererRemoved = OnRemoteRendererRemovedDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteRendererEventListenerNative(objPtr, _mOnRemoteRendererAdded, _mOnRemoteRendererRemoved);

			return ret;
		}
		public Boolean RegisterRemoteSpeakerEventListener(IRegisterRemoteSpeakerEventListener _iIRegisterRemoteSpeakerEventListener){
			_mIRegisterRemoteSpeakerEventListener = _iIRegisterRemoteSpeakerEventListener;
			_mOnRemoteSpeakerAdded = OnRemoteSpeakerAddedDelegate;
			_mOnRemoteSpeakerRemoved = OnRemoteSpeakerRemovedDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteSpeakerEventListenerNative(objPtr, _mOnRemoteSpeakerAdded, _mOnRemoteSpeakerRemoved);

			return ret;
		}
		public Boolean RegisterRemoteWindowShareEventListener(IRegisterRemoteWindowShareEventListener _iIRegisterRemoteWindowShareEventListener){
			_mIRegisterRemoteWindowShareEventListener = _iIRegisterRemoteWindowShareEventListener;
			_mOnRemoteWindowShareAdded = OnRemoteWindowShareAddedDelegate;
			_mOnRemoteWindowShareRemoved = OnRemoteWindowShareRemovedDelegate;
			_mOnRemoteWindowShareStateUpdated = OnRemoteWindowShareStateUpdatedDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteWindowShareEventListenerNative(objPtr, _mOnRemoteWindowShareAdded, _mOnRemoteWindowShareRemoved, _mOnRemoteWindowShareStateUpdated);

			return ret;
		}
		public Boolean RegisterRemoteWindowShareFrameListener(RemoteWindowShare remoteWindowShare, IRegisterRemoteWindowShareFrameListener _iIRegisterRemoteWindowShareFrameListener, uint width, uint height, ulong frameInterval){
			_mIRegisterRemoteWindowShareFrameListener = _iIRegisterRemoteWindowShareFrameListener;
			_mOnRemoteWindowShareFrame = OnRemoteWindowShareFrameDelegate;

			Boolean ret = VidyoEndpointRegisterRemoteWindowShareFrameListenerNative(objPtr, (remoteWindowShare != null) ? remoteWindowShare.GetObjectPtr():IntPtr.Zero, _mOnRemoteWindowShareFrame, width, height, frameInterval);

			return ret;
		}
		public void RemoveRenderer(LocalRenderer localRenderer){

			VidyoEndpointRemoveRendererNative(objPtr, (localRenderer != null) ? localRenderer.GetObjectPtr():IntPtr.Zero);
		}
		public Boolean SelectAudioContentShare(LocalMicrophone localMicrophone){

			Boolean ret = VidyoEndpointSelectAudioContentShareNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectDefaultCamera(){

			Boolean ret = VidyoEndpointSelectDefaultCameraNative(objPtr);

			return ret;
		}
		public Boolean SelectDefaultMicrophone(){

			Boolean ret = VidyoEndpointSelectDefaultMicrophoneNative(objPtr);

			return ret;
		}
		public Boolean SelectDefaultNetworkInterfaceForMedia(){

			Boolean ret = VidyoEndpointSelectDefaultNetworkInterfaceForMediaNative(objPtr);

			return ret;
		}
		public Boolean SelectDefaultNetworkInterfaceForSignaling(){

			Boolean ret = VidyoEndpointSelectDefaultNetworkInterfaceForSignalingNative(objPtr);

			return ret;
		}
		public Boolean SelectDefaultSpeaker(){

			Boolean ret = VidyoEndpointSelectDefaultSpeakerNative(objPtr);

			return ret;
		}
		public Boolean SelectLocalCamera(LocalCamera localCamera){

			Boolean ret = VidyoEndpointSelectLocalCameraNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectLocalMicrophone(LocalMicrophone localMicrophone){

			Boolean ret = VidyoEndpointSelectLocalMicrophoneNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectLocalMonitor(LocalMonitor localMonitor){

			Boolean ret = VidyoEndpointSelectLocalMonitorNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectLocalSpeaker(LocalSpeaker localSpeaker){

			Boolean ret = VidyoEndpointSelectLocalSpeakerNative(objPtr, (localSpeaker != null) ? localSpeaker.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectLocalWindowShare(LocalWindowShare localWindowShare){

			Boolean ret = VidyoEndpointSelectLocalWindowShareNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectNetworkInterfaceForMedia(NetworkInterface networkInterface){

			Boolean ret = VidyoEndpointSelectNetworkInterfaceForMediaNative(objPtr, (networkInterface != null) ? networkInterface.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectNetworkInterfaceForSignaling(NetworkInterface networkInterface){

			Boolean ret = VidyoEndpointSelectNetworkInterfaceForSignalingNative(objPtr, (networkInterface != null) ? networkInterface.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectVideoContentShare(LocalCamera localCamera){

			Boolean ret = VidyoEndpointSelectVideoContentShareNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SelectVirtualWindowShare(VirtualWindowShare virtualWindowShare){

			Boolean ret = VidyoEndpointSelectVirtualWindowShareNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean SetAdvancedOptions(String options){

			IntPtr nOptions = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(options ?? string.Empty);
			Boolean ret = VidyoEndpointSetAdvancedOptionsNative(objPtr, nOptions);
			Marshal.FreeHGlobal(nOptions);

			return ret;
		}
		public Boolean SetApplicationTag(String applicationTag){

			IntPtr nApplicationTag = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(applicationTag ?? string.Empty);
			Boolean ret = VidyoEndpointSetApplicationTagNative(objPtr, nApplicationTag);
			Marshal.FreeHGlobal(nApplicationTag);

			return ret;
		}
		public Boolean SetCameraNudgeConfiguration(String cameraNudgeConfig){

			IntPtr nCameraNudgeConfig = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(cameraNudgeConfig ?? string.Empty);
			Boolean ret = VidyoEndpointSetCameraNudgeConfigurationNative(objPtr, nCameraNudgeConfig);
			Marshal.FreeHGlobal(nCameraNudgeConfig);

			return ret;
		}
		public Boolean SetCameraPrivacy(Boolean privacy){

			Boolean ret = VidyoEndpointSetCameraPrivacyNative(objPtr, privacy);

			return ret;
		}
		public Boolean SetConsoleLoggerFilter(String consoleLogFilter){

			IntPtr nConsoleLogFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(consoleLogFilter ?? string.Empty);
			Boolean ret = VidyoEndpointSetConsoleLoggerFilterNative(objPtr, nConsoleLogFilter);
			Marshal.FreeHGlobal(nConsoleLogFilter);

			return ret;
		}
		public Boolean SetConsoleLoggerLevelAndCategory(String levelName, String categoryName, Boolean on){

			IntPtr nLevelName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(levelName ?? string.Empty);
			IntPtr nCategoryName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(categoryName ?? string.Empty);
			Boolean ret = VidyoEndpointSetConsoleLoggerLevelAndCategoryNative(objPtr, nLevelName, nCategoryName, on);
			Marshal.FreeHGlobal(nCategoryName);
			Marshal.FreeHGlobal(nLevelName);

			return ret;
		}
		public Boolean SetConsoleLoggerUTC(Boolean utc){

			Boolean ret = VidyoEndpointSetConsoleLoggerUTCNative(objPtr, utc);

			return ret;
		}
		public Boolean SetCpuTradeOffProfile(EndpointTradeOffProfile profile){

			Boolean ret = VidyoEndpointSetCpuTradeOffProfileNative(objPtr, profile);

			return ret;
		}
		public Boolean SetDebugFilter(String debugLogFilter){

			IntPtr nDebugLogFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(debugLogFilter ?? string.Empty);
			Boolean ret = VidyoEndpointSetDebugFilterNative(objPtr, nDebugLogFilter);
			Marshal.FreeHGlobal(nDebugLogFilter);

			return ret;
		}
		public Boolean SetFileLoggerFilter(String logFileFilter){

			IntPtr nLogFileFilter = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(logFileFilter ?? string.Empty);
			Boolean ret = VidyoEndpointSetFileLoggerFilterNative(objPtr, nLogFileFilter);
			Marshal.FreeHGlobal(nLogFileFilter);

			return ret;
		}
		public Boolean SetFileLoggerLevelAndCategory(String levelName, String categoryName, Boolean on){

			IntPtr nLevelName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(levelName ?? string.Empty);
			IntPtr nCategoryName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(categoryName ?? string.Empty);
			Boolean ret = VidyoEndpointSetFileLoggerLevelAndCategoryNative(objPtr, nLevelName, nCategoryName, on);
			Marshal.FreeHGlobal(nCategoryName);
			Marshal.FreeHGlobal(nLevelName);

			return ret;
		}
		public Boolean SetFileLoggerRotationParameters(ulong maxSize, ulong wrapPeriod, ulong wrapCount){

			Boolean ret = VidyoEndpointSetFileLoggerRotationParametersNative(objPtr, maxSize, wrapPeriod, wrapCount);

			return ret;
		}
		public Boolean SetFileLoggerUTC(Boolean utc){

			Boolean ret = VidyoEndpointSetFileLoggerUTCNative(objPtr, utc);

			return ret;
		}
		public Boolean SetFontFileName(String fontFileName){

			IntPtr nFontFileName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(fontFileName ?? string.Empty);
			Boolean ret = VidyoEndpointSetFontFileNameNative(objPtr, nFontFileName);
			Marshal.FreeHGlobal(nFontFileName);

			return ret;
		}
		public Boolean SetLicenseKey(String licenseKey){

			IntPtr nLicenseKey = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(licenseKey ?? string.Empty);
			Boolean ret = VidyoEndpointSetLicenseKeyNative(objPtr, nLicenseKey);
			Marshal.FreeHGlobal(nLicenseKey);

			return ret;
		}
		public Boolean SetLocation(double latitude, double longitude){

			Boolean ret = VidyoEndpointSetLocationNative(objPtr, latitude, longitude);

			return ret;
		}
		public void SetMaxBitRate(uint bitRate){

			VidyoEndpointSetMaxBitRateNative(objPtr, bitRate);
		}
		public Boolean SetMicrophonePrivacy(Boolean privacy){

			Boolean ret = VidyoEndpointSetMicrophonePrivacyNative(objPtr, privacy);

			return ret;
		}
		public Boolean SetMode(EndpointMode mode){

			Boolean ret = VidyoEndpointSetModeNative(objPtr, mode);

			return ret;
		}
		public Boolean SetPool(String name){

			IntPtr nName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(name ?? string.Empty);
			Boolean ret = VidyoEndpointSetPoolNative(objPtr, nName);
			Marshal.FreeHGlobal(nName);

			return ret;
		}
		public Boolean SetPreview(Boolean preview){

			Boolean ret = VidyoEndpointSetPreviewNative(objPtr, preview);

			return ret;
		}
		public Boolean SetProductInfo(List<Property> productInfo, List<Property> supportedFeature){

			IntPtr nProductInfo = IntPtr.Zero;

			IntPtr nSupportedFeature = IntPtr.Zero;

			Boolean ret = VidyoEndpointSetProductInfoNative(objPtr, nProductInfo, nSupportedFeature);

			return ret;
		}
		public Boolean SetSpeakerPrivacy(Boolean privacy){

			Boolean ret = VidyoEndpointSetSpeakerPrivacyNative(objPtr, privacy);

			return ret;
		}
		public Boolean SetTURNAddressCredentials(String turnAddress, uint port, String username, String password, EndpointBaseTransportType baseTransport){

			IntPtr nTurnAddress = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(turnAddress ?? string.Empty);
			IntPtr nUsername = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(username ?? string.Empty);
			IntPtr nPassword = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(password ?? string.Empty);
			Boolean ret = VidyoEndpointSetTURNAddressCredentialsNative(objPtr, nTurnAddress, port, nUsername, nPassword, baseTransport);
			Marshal.FreeHGlobal(nPassword);
			Marshal.FreeHGlobal(nUsername);
			Marshal.FreeHGlobal(nTurnAddress);

			return ret;
		}
		public Boolean SetTURNServerCertificateRequired(Boolean required){

			Boolean ret = VidyoEndpointSetTURNServerCertificateRequiredNative(objPtr, required);

			return ret;
		}
		public Boolean SetViewAnimationSpeed(IntPtr viewId, uint speedPercentage){

			Boolean ret = VidyoEndpointSetViewAnimationSpeedNative(objPtr, ref viewId, speedPercentage);

			return ret;
		}
		public Boolean SetViewBackgroundColor(IntPtr viewId, byte red, byte green, byte blue){

			Boolean ret = VidyoEndpointSetViewBackgroundColorNative(objPtr, ref viewId, red, green, blue);

			return ret;
		}
		public Boolean ShowAudioMeters(IntPtr viewId, Boolean showMeters){

			Boolean ret = VidyoEndpointShowAudioMetersNative(objPtr, ref viewId, showMeters);

			return ret;
		}
		public Boolean ShowPreview(Boolean preview){

			Boolean ret = VidyoEndpointShowPreviewNative(objPtr, preview);

			return ret;
		}
		public Boolean ShowViewAt(IntPtr viewId, int x, int y, uint width, uint height){

			Boolean ret = VidyoEndpointShowViewAtNative(objPtr, ref viewId, x, y, width, height);

			return ret;
		}
		public Boolean ShowViewAtPoints(IntPtr viewId, int x, int y, uint width, uint height){

			Boolean ret = VidyoEndpointShowViewAtPointsNative(objPtr, ref viewId, x, y, width, height);

			return ret;
		}
		public Boolean ShowViewLabel(IntPtr viewId, Boolean showLabel){

			Boolean ret = VidyoEndpointShowViewLabelNative(objPtr, ref viewId, showLabel);

			return ret;
		}
		public Boolean ShowWindowSharePreview(Boolean preview){

			Boolean ret = VidyoEndpointShowWindowSharePreviewNative(objPtr, preview);

			return ret;
		}
		public Boolean StartLocalCameraDetection(){

			Boolean ret = VidyoEndpointStartLocalCameraDetectionNative(objPtr);

			return ret;
		}
		public Boolean StartLocalMicrophoneDetection(){

			Boolean ret = VidyoEndpointStartLocalMicrophoneDetectionNative(objPtr);

			return ret;
		}
		public Boolean StartLocalMonitorDetection(){

			Boolean ret = VidyoEndpointStartLocalMonitorDetectionNative(objPtr);

			return ret;
		}
		public Boolean StartLocalSpeakerDetection(){

			Boolean ret = VidyoEndpointStartLocalSpeakerDetectionNative(objPtr);

			return ret;
		}
		public Boolean StartLocalWindowShareDetection(){

			Boolean ret = VidyoEndpointStartLocalWindowShareDetectionNative(objPtr);

			return ret;
		}
		public Boolean StartLocationDetection(){

			Boolean ret = VidyoEndpointStartLocationDetectionNative(objPtr);

			return ret;
		}
		public void StopLocalCameraDetection(){

			VidyoEndpointStopLocalCameraDetectionNative(objPtr);
		}
		public void StopLocalMicrophoneDetection(){

			VidyoEndpointStopLocalMicrophoneDetectionNative(objPtr);
		}
		public void StopLocalMonitorDetection(){

			VidyoEndpointStopLocalMonitorDetectionNative(objPtr);
		}
		public void StopLocalSpeakerDetection(){

			VidyoEndpointStopLocalSpeakerDetectionNative(objPtr);
		}
		public void StopLocalWindowShareDetection(){

			VidyoEndpointStopLocalWindowShareDetectionNative(objPtr);
		}
		public void StopLocationDetection(){

			VidyoEndpointStopLocationDetectionNative(objPtr);
		}
		public Boolean UnregisterLocalCameraEventListener(){

			Boolean ret = VidyoEndpointUnregisterLocalCameraEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalCameraFrameListener(LocalCamera localCamera){

			Boolean ret = VidyoEndpointUnregisterLocalCameraFrameListenerNative(objPtr, (localCamera != null) ? localCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterLocalMicrophoneEnergyListener(){

			Boolean ret = VidyoEndpointUnregisterLocalMicrophoneEnergyListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalMicrophoneEventListener(){

			Boolean ret = VidyoEndpointUnregisterLocalMicrophoneEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalMicrophoneFrameListener(LocalMicrophone localMicrophone){

			Boolean ret = VidyoEndpointUnregisterLocalMicrophoneFrameListenerNative(objPtr, (localMicrophone != null) ? localMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterLocalMonitorEventListener(){

			Boolean ret = VidyoEndpointUnregisterLocalMonitorEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalMonitorFrameListener(LocalMonitor localMonitor){

			Boolean ret = VidyoEndpointUnregisterLocalMonitorFrameListenerNative(objPtr, (localMonitor != null) ? localMonitor.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterLocalRendererEventListener(){

			Boolean ret = VidyoEndpointUnregisterLocalRendererEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalSpeakerEventListener(){

			Boolean ret = VidyoEndpointUnregisterLocalSpeakerEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalWindowShareEventListener(){

			Boolean ret = VidyoEndpointUnregisterLocalWindowShareEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterLocalWindowShareFrameListener(LocalWindowShare localWindowShare){

			Boolean ret = VidyoEndpointUnregisterLocalWindowShareFrameListenerNative(objPtr, (localWindowShare != null) ? localWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterLogEventListener(){

			Boolean ret = VidyoEndpointUnregisterLogEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterNetworkInterfaceEventListener(){

			Boolean ret = VidyoEndpointUnregisterNetworkInterfaceEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteCameraEventListener(){

			Boolean ret = VidyoEndpointUnregisterRemoteCameraEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteCameraFrameListener(RemoteCamera remoteCamera){

			Boolean ret = VidyoEndpointUnregisterRemoteCameraFrameListenerNative(objPtr, (remoteCamera != null) ? remoteCamera.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterRemoteMicrophoneEnergyListener(){

			Boolean ret = VidyoEndpointUnregisterRemoteMicrophoneEnergyListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteMicrophoneEventListener(){

			Boolean ret = VidyoEndpointUnregisterRemoteMicrophoneEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteMicrophoneFrameListener(RemoteMicrophone remoteMicrophone){

			Boolean ret = VidyoEndpointUnregisterRemoteMicrophoneFrameListenerNative(objPtr, (remoteMicrophone != null) ? remoteMicrophone.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean UnregisterRemoteRendererEventListener(){

			Boolean ret = VidyoEndpointUnregisterRemoteRendererEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteSpeakerEventListener(){

			Boolean ret = VidyoEndpointUnregisterRemoteSpeakerEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteWindowShareEventListener(){

			Boolean ret = VidyoEndpointUnregisterRemoteWindowShareEventListenerNative(objPtr);

			return ret;
		}
		public Boolean UnregisterRemoteWindowShareFrameListener(RemoteWindowShare remoteWindowShare){

			Boolean ret = VidyoEndpointUnregisterRemoteWindowShareFrameListenerNative(objPtr, (remoteWindowShare != null) ? remoteWindowShare.GetObjectPtr():IntPtr.Zero);

			return ret;
		}
		public Boolean ValidateLicenseKey(String licenseKey, String userName){

			IntPtr nLicenseKey = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(licenseKey ?? string.Empty);
			IntPtr nUserName = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(userName ?? string.Empty);
			Boolean ret = VidyoEndpointValidateLicenseKeyNative(objPtr, nLicenseKey, nUserName);
			Marshal.FreeHGlobal(nUserName);
			Marshal.FreeHGlobal(nLicenseKey);

			return ret;
		}
		public void VirtualWindowShareSelectAdvanced(VirtualWindowShare virtualWindowShare){

			VidyoEndpointVirtualWindowShareSelectAdvancedNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero);
		}
		public void VirtualWindowShareUnselectAdvanced(VirtualWindowShare virtualWindowShare){

			VidyoEndpointVirtualWindowShareUnselectAdvancedNative(objPtr, (virtualWindowShare != null) ? virtualWindowShare.GetObjectPtr():IntPtr.Zero);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraAdded))]
#endif
		private static void OnLocalCameraAddedDelegate(IntPtr e, IntPtr localCamera){
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			if(_mIRegisterLocalCameraEventListener != null)
				_mIRegisterLocalCameraEventListener.OnLocalCameraAdded(csLocalCamera);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraFrame))]
#endif
		private static void OnLocalCameraFrameDelegate(IntPtr e, IntPtr localCamera, IntPtr videoFrame){
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(_mIRegisterLocalCameraFrameListener != null)
				_mIRegisterLocalCameraFrameListener.OnLocalCameraFrame(csLocalCamera, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraRemoved))]
#endif
		private static void OnLocalCameraRemovedDelegate(IntPtr e, IntPtr localCamera){
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			if(_mIRegisterLocalCameraEventListener != null)
				_mIRegisterLocalCameraEventListener.OnLocalCameraRemoved(csLocalCamera);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraSelected))]
#endif
		private static void OnLocalCameraSelectedDelegate(IntPtr e, IntPtr localCamera){
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			if(_mIRegisterLocalCameraEventListener != null)
				_mIRegisterLocalCameraEventListener.OnLocalCameraSelected(csLocalCamera);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalCameraStateUpdated))]
#endif
		private static void OnLocalCameraStateUpdatedDelegate(IntPtr e, IntPtr localCamera, Device.DeviceState state){
			LocalCamera csLocalCamera = null;
			if(localCamera != IntPtr.Zero){
				if(LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera) == IntPtr.Zero)
					csLocalCamera = new LocalCamera(localCamera);
				else{
					GCHandle objHandle = (GCHandle)LocalCamera.VidyoLocalCameraGetUserDataNative(localCamera);
					csLocalCamera = (LocalCamera)objHandle.Target;
				}
			}
			if(_mIRegisterLocalCameraEventListener != null)
				_mIRegisterLocalCameraEventListener.OnLocalCameraStateUpdated(csLocalCamera, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneAdded))]
#endif
		private static void OnLocalMicrophoneAddedDelegate(IntPtr e, IntPtr localMicrophone){
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMicrophoneEventListener != null)
				_mIRegisterLocalMicrophoneEventListener.OnLocalMicrophoneAdded(csLocalMicrophone);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneEnergy))]
#endif
		private static void OnLocalMicrophoneEnergyDelegate(IntPtr e, IntPtr localMicrophone, int audioEnergy){
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMicrophoneEnergyListener != null)
				_mIRegisterLocalMicrophoneEnergyListener.OnLocalMicrophoneEnergy(csLocalMicrophone, audioEnergy);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneFrame))]
#endif
		private static void OnLocalMicrophoneFrameDelegate(IntPtr e, IntPtr localMicrophone, IntPtr audioFrame){
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			AudioFrame csAudioFrame = null;
			if(audioFrame != IntPtr.Zero){
				if(AudioFrame.VidyoAudioFrameGetUserDataNative(audioFrame) == IntPtr.Zero)
					csAudioFrame = new AudioFrame(audioFrame);
				else{
					GCHandle objHandle = (GCHandle)AudioFrame.VidyoAudioFrameGetUserDataNative(audioFrame);
					csAudioFrame = (AudioFrame)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMicrophoneFrameListener != null)
				_mIRegisterLocalMicrophoneFrameListener.OnLocalMicrophoneFrame(csLocalMicrophone, csAudioFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneRemoved))]
#endif
		private static void OnLocalMicrophoneRemovedDelegate(IntPtr e, IntPtr localMicrophone){
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMicrophoneEventListener != null)
				_mIRegisterLocalMicrophoneEventListener.OnLocalMicrophoneRemoved(csLocalMicrophone);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneSelected))]
#endif
		private static void OnLocalMicrophoneSelectedDelegate(IntPtr e, IntPtr localMicrophone){
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMicrophoneEventListener != null)
				_mIRegisterLocalMicrophoneEventListener.OnLocalMicrophoneSelected(csLocalMicrophone);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMicrophoneStateUpdated))]
#endif
		private static void OnLocalMicrophoneStateUpdatedDelegate(IntPtr e, IntPtr localMicrophone, Device.DeviceState state){
			LocalMicrophone csLocalMicrophone = null;
			if(localMicrophone != IntPtr.Zero){
				if(LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone) == IntPtr.Zero)
					csLocalMicrophone = new LocalMicrophone(localMicrophone);
				else{
					GCHandle objHandle = (GCHandle)LocalMicrophone.VidyoLocalMicrophoneGetUserDataNative(localMicrophone);
					csLocalMicrophone = (LocalMicrophone)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMicrophoneEventListener != null)
				_mIRegisterLocalMicrophoneEventListener.OnLocalMicrophoneStateUpdated(csLocalMicrophone, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorAdded))]
#endif
		private static void OnLocalMonitorAddedDelegate(IntPtr e, IntPtr localMonitor){
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMonitorEventListener != null)
				_mIRegisterLocalMonitorEventListener.OnLocalMonitorAdded(csLocalMonitor);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorFrame))]
#endif
		private static void OnLocalMonitorFrameDelegate(IntPtr e, IntPtr localMonitor, IntPtr videoFrame){
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMonitorFrameListener != null)
				_mIRegisterLocalMonitorFrameListener.OnLocalMonitorFrame(csLocalMonitor, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorRemoved))]
#endif
		private static void OnLocalMonitorRemovedDelegate(IntPtr e, IntPtr localMonitor){
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMonitorEventListener != null)
				_mIRegisterLocalMonitorEventListener.OnLocalMonitorRemoved(csLocalMonitor);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorSelected))]
#endif
		private static void OnLocalMonitorSelectedDelegate(IntPtr e, IntPtr localMonitor){
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMonitorEventListener != null)
				_mIRegisterLocalMonitorEventListener.OnLocalMonitorSelected(csLocalMonitor);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalMonitorStateUpdated))]
#endif
		private static void OnLocalMonitorStateUpdatedDelegate(IntPtr e, IntPtr localMonitor, Device.DeviceState state){
			LocalMonitor csLocalMonitor = null;
			if(localMonitor != IntPtr.Zero){
				if(LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor) == IntPtr.Zero)
					csLocalMonitor = new LocalMonitor(localMonitor);
				else{
					GCHandle objHandle = (GCHandle)LocalMonitor.VidyoLocalMonitorGetUserDataNative(localMonitor);
					csLocalMonitor = (LocalMonitor)objHandle.Target;
				}
			}
			if(_mIRegisterLocalMonitorEventListener != null)
				_mIRegisterLocalMonitorEventListener.OnLocalMonitorStateUpdated(csLocalMonitor, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalRendererAdded))]
#endif
		private static void OnLocalRendererAddedDelegate(IntPtr e, IntPtr localRenderer){
			LocalRenderer csLocalRenderer = null;
			if(localRenderer != IntPtr.Zero){
				if(LocalRenderer.VidyoLocalRendererGetUserDataNative(localRenderer) == IntPtr.Zero)
					csLocalRenderer = new LocalRenderer(localRenderer);
				else{
					GCHandle objHandle = (GCHandle)LocalRenderer.VidyoLocalRendererGetUserDataNative(localRenderer);
					csLocalRenderer = (LocalRenderer)objHandle.Target;
				}
			}
			if(_mIRegisterLocalRendererEventListener != null)
				_mIRegisterLocalRendererEventListener.OnLocalRendererAdded(csLocalRenderer);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalRendererRemoved))]
#endif
		private static void OnLocalRendererRemovedDelegate(IntPtr e, IntPtr localRenderer){
			LocalRenderer csLocalRenderer = null;
			if(localRenderer != IntPtr.Zero){
				if(LocalRenderer.VidyoLocalRendererGetUserDataNative(localRenderer) == IntPtr.Zero)
					csLocalRenderer = new LocalRenderer(localRenderer);
				else{
					GCHandle objHandle = (GCHandle)LocalRenderer.VidyoLocalRendererGetUserDataNative(localRenderer);
					csLocalRenderer = (LocalRenderer)objHandle.Target;
				}
			}
			if(_mIRegisterLocalRendererEventListener != null)
				_mIRegisterLocalRendererEventListener.OnLocalRendererRemoved(csLocalRenderer);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalRendererSelected))]
#endif
		private static void OnLocalRendererSelectedDelegate(IntPtr e, IntPtr localRenderer){
			LocalRenderer csLocalRenderer = null;
			if(localRenderer != IntPtr.Zero){
				if(LocalRenderer.VidyoLocalRendererGetUserDataNative(localRenderer) == IntPtr.Zero)
					csLocalRenderer = new LocalRenderer(localRenderer);
				else{
					GCHandle objHandle = (GCHandle)LocalRenderer.VidyoLocalRendererGetUserDataNative(localRenderer);
					csLocalRenderer = (LocalRenderer)objHandle.Target;
				}
			}
			if(_mIRegisterLocalRendererEventListener != null)
				_mIRegisterLocalRendererEventListener.OnLocalRendererSelected(csLocalRenderer);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalRendererStateUpdated))]
#endif
		private static void OnLocalRendererStateUpdatedDelegate(IntPtr e, IntPtr localRenderer, Device.DeviceState state){
			LocalRenderer csLocalRenderer = null;
			if(localRenderer != IntPtr.Zero){
				if(LocalRenderer.VidyoLocalRendererGetUserDataNative(localRenderer) == IntPtr.Zero)
					csLocalRenderer = new LocalRenderer(localRenderer);
				else{
					GCHandle objHandle = (GCHandle)LocalRenderer.VidyoLocalRendererGetUserDataNative(localRenderer);
					csLocalRenderer = (LocalRenderer)objHandle.Target;
				}
			}
			if(_mIRegisterLocalRendererEventListener != null)
				_mIRegisterLocalRendererEventListener.OnLocalRendererStateUpdated(csLocalRenderer, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalSpeakerAdded))]
#endif
		private static void OnLocalSpeakerAddedDelegate(IntPtr e, IntPtr localSpeaker){
			LocalSpeaker csLocalSpeaker = null;
			if(localSpeaker != IntPtr.Zero){
				if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker) == IntPtr.Zero)
					csLocalSpeaker = new LocalSpeaker(localSpeaker);
				else{
					GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker);
					csLocalSpeaker = (LocalSpeaker)objHandle.Target;
				}
			}
			if(_mIRegisterLocalSpeakerEventListener != null)
				_mIRegisterLocalSpeakerEventListener.OnLocalSpeakerAdded(csLocalSpeaker);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalSpeakerRemoved))]
#endif
		private static void OnLocalSpeakerRemovedDelegate(IntPtr e, IntPtr localSpeaker){
			LocalSpeaker csLocalSpeaker = null;
			if(localSpeaker != IntPtr.Zero){
				if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker) == IntPtr.Zero)
					csLocalSpeaker = new LocalSpeaker(localSpeaker);
				else{
					GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker);
					csLocalSpeaker = (LocalSpeaker)objHandle.Target;
				}
			}
			if(_mIRegisterLocalSpeakerEventListener != null)
				_mIRegisterLocalSpeakerEventListener.OnLocalSpeakerRemoved(csLocalSpeaker);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalSpeakerSelected))]
#endif
		private static void OnLocalSpeakerSelectedDelegate(IntPtr e, IntPtr localSpeaker){
			LocalSpeaker csLocalSpeaker = null;
			if(localSpeaker != IntPtr.Zero){
				if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker) == IntPtr.Zero)
					csLocalSpeaker = new LocalSpeaker(localSpeaker);
				else{
					GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker);
					csLocalSpeaker = (LocalSpeaker)objHandle.Target;
				}
			}
			if(_mIRegisterLocalSpeakerEventListener != null)
				_mIRegisterLocalSpeakerEventListener.OnLocalSpeakerSelected(csLocalSpeaker);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalSpeakerStateUpdated))]
#endif
		private static void OnLocalSpeakerStateUpdatedDelegate(IntPtr e, IntPtr localSpeaker, Device.DeviceState state){
			LocalSpeaker csLocalSpeaker = null;
			if(localSpeaker != IntPtr.Zero){
				if(LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker) == IntPtr.Zero)
					csLocalSpeaker = new LocalSpeaker(localSpeaker);
				else{
					GCHandle objHandle = (GCHandle)LocalSpeaker.VidyoLocalSpeakerGetUserDataNative(localSpeaker);
					csLocalSpeaker = (LocalSpeaker)objHandle.Target;
				}
			}
			if(_mIRegisterLocalSpeakerEventListener != null)
				_mIRegisterLocalSpeakerEventListener.OnLocalSpeakerStateUpdated(csLocalSpeaker, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareAdded))]
#endif
		private static void OnLocalWindowShareAddedDelegate(IntPtr e, IntPtr localWindowShare){
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			if(_mIRegisterLocalWindowShareEventListener != null)
				_mIRegisterLocalWindowShareEventListener.OnLocalWindowShareAdded(csLocalWindowShare);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareFrame))]
#endif
		private static void OnLocalWindowShareFrameDelegate(IntPtr e, IntPtr localWindowShare, IntPtr videoFrame){
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(_mIRegisterLocalWindowShareFrameListener != null)
				_mIRegisterLocalWindowShareFrameListener.OnLocalWindowShareFrame(csLocalWindowShare, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareRemoved))]
#endif
		private static void OnLocalWindowShareRemovedDelegate(IntPtr e, IntPtr localWindowShare){
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			if(_mIRegisterLocalWindowShareEventListener != null)
				_mIRegisterLocalWindowShareEventListener.OnLocalWindowShareRemoved(csLocalWindowShare);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareSelected))]
#endif
		private static void OnLocalWindowShareSelectedDelegate(IntPtr e, IntPtr localWindowShare){
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			if(_mIRegisterLocalWindowShareEventListener != null)
				_mIRegisterLocalWindowShareEventListener.OnLocalWindowShareSelected(csLocalWindowShare);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLocalWindowShareStateUpdated))]
#endif
		private static void OnLocalWindowShareStateUpdatedDelegate(IntPtr e, IntPtr localWindowShare, Device.DeviceState state){
			LocalWindowShare csLocalWindowShare = null;
			if(localWindowShare != IntPtr.Zero){
				if(LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare) == IntPtr.Zero)
					csLocalWindowShare = new LocalWindowShare(localWindowShare);
				else{
					GCHandle objHandle = (GCHandle)LocalWindowShare.VidyoLocalWindowShareGetUserDataNative(localWindowShare);
					csLocalWindowShare = (LocalWindowShare)objHandle.Target;
				}
			}
			if(_mIRegisterLocalWindowShareEventListener != null)
				_mIRegisterLocalWindowShareEventListener.OnLocalWindowShareStateUpdated(csLocalWindowShare, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLog))]
#endif
		private static void OnLogDelegate(IntPtr e, IntPtr logRecord){
			LogRecord csLogRecord = new LogRecord(logRecord);
			if(_mIRegisterLogEventListener != null)
				_mIRegisterLogEventListener.OnLog(csLogRecord);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnLogCompressionComplete))]
#endif
		private static void OnLogCompressionCompleteDelegate(IntPtr e, IntPtr compressedFileName, EndpointLogCompressionResult result){
			IntPtr n_compressedFileName = VidyoEndpointOnLogCompressionCompleteGetcompressedFileNameCStr(compressedFileName);

			if(_mICompressLogs != null)
				_mICompressLogs.OnLogCompressionComplete((string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(n_compressedFileName), result);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnNetworkInterfaceAdded))]
#endif
		private static void OnNetworkInterfaceAddedDelegate(IntPtr e, IntPtr networkInterface){
			NetworkInterface csNetworkInterface = null;
			if(networkInterface != IntPtr.Zero){
				if(NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface) == IntPtr.Zero)
					csNetworkInterface = new NetworkInterface(networkInterface);
				else{
					GCHandle objHandle = (GCHandle)NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface);
					csNetworkInterface = (NetworkInterface)objHandle.Target;
				}
			}
			if(_mIRegisterNetworkInterfaceEventListener != null)
				_mIRegisterNetworkInterfaceEventListener.OnNetworkInterfaceAdded(csNetworkInterface);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnNetworkInterfaceRemoved))]
#endif
		private static void OnNetworkInterfaceRemovedDelegate(IntPtr e, IntPtr networkInterface){
			NetworkInterface csNetworkInterface = null;
			if(networkInterface != IntPtr.Zero){
				if(NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface) == IntPtr.Zero)
					csNetworkInterface = new NetworkInterface(networkInterface);
				else{
					GCHandle objHandle = (GCHandle)NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface);
					csNetworkInterface = (NetworkInterface)objHandle.Target;
				}
			}
			if(_mIRegisterNetworkInterfaceEventListener != null)
				_mIRegisterNetworkInterfaceEventListener.OnNetworkInterfaceRemoved(csNetworkInterface);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnNetworkInterfaceSelected))]
#endif
		private static void OnNetworkInterfaceSelectedDelegate(IntPtr e, IntPtr networkInterface, NetworkInterface.NetworkInterfaceTransportType transportType){
			NetworkInterface csNetworkInterface = null;
			if(networkInterface != IntPtr.Zero){
				if(NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface) == IntPtr.Zero)
					csNetworkInterface = new NetworkInterface(networkInterface);
				else{
					GCHandle objHandle = (GCHandle)NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface);
					csNetworkInterface = (NetworkInterface)objHandle.Target;
				}
			}
			if(_mIRegisterNetworkInterfaceEventListener != null)
				_mIRegisterNetworkInterfaceEventListener.OnNetworkInterfaceSelected(csNetworkInterface, transportType);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnNetworkInterfaceStateUpdated))]
#endif
		private static void OnNetworkInterfaceStateUpdatedDelegate(IntPtr e, IntPtr networkInterface, NetworkInterface.NetworkInterfaceState state){
			NetworkInterface csNetworkInterface = null;
			if(networkInterface != IntPtr.Zero){
				if(NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface) == IntPtr.Zero)
					csNetworkInterface = new NetworkInterface(networkInterface);
				else{
					GCHandle objHandle = (GCHandle)NetworkInterface.VidyoNetworkInterfaceGetUserDataNative(networkInterface);
					csNetworkInterface = (NetworkInterface)objHandle.Target;
				}
			}
			if(_mIRegisterNetworkInterfaceEventListener != null)
				_mIRegisterNetworkInterfaceEventListener.OnNetworkInterfaceStateUpdated(csNetworkInterface, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteCameraAdded))]
#endif
		private static void OnRemoteCameraAddedDelegate(IntPtr e, IntPtr remoteCamera, IntPtr user, IntPtr call, IntPtr room, IntPtr participant){
			RemoteCamera csRemoteCamera = null;
			if(remoteCamera != IntPtr.Zero){
				if(RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera) == IntPtr.Zero)
					csRemoteCamera = new RemoteCamera(remoteCamera);
				else{
					GCHandle objHandle = (GCHandle)RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera);
					csRemoteCamera = (RemoteCamera)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteCameraEventListener != null)
				_mIRegisterRemoteCameraEventListener.OnRemoteCameraAdded(csRemoteCamera, csUser, csCall, csRoom, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteCameraFrame))]
#endif
		private static void OnRemoteCameraFrameDelegate(IntPtr e, IntPtr remoteCamera, IntPtr participant, IntPtr videoFrame){
			RemoteCamera csRemoteCamera = null;
			if(remoteCamera != IntPtr.Zero){
				if(RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera) == IntPtr.Zero)
					csRemoteCamera = new RemoteCamera(remoteCamera);
				else{
					GCHandle objHandle = (GCHandle)RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera);
					csRemoteCamera = (RemoteCamera)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteCameraFrameListener != null)
				_mIRegisterRemoteCameraFrameListener.OnRemoteCameraFrame(csRemoteCamera, csParticipant, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteCameraRemoved))]
#endif
		private static void OnRemoteCameraRemovedDelegate(IntPtr e, IntPtr remoteCamera, IntPtr user, IntPtr call, IntPtr room, IntPtr participant){
			RemoteCamera csRemoteCamera = null;
			if(remoteCamera != IntPtr.Zero){
				if(RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera) == IntPtr.Zero)
					csRemoteCamera = new RemoteCamera(remoteCamera);
				else{
					GCHandle objHandle = (GCHandle)RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera);
					csRemoteCamera = (RemoteCamera)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteCameraEventListener != null)
				_mIRegisterRemoteCameraEventListener.OnRemoteCameraRemoved(csRemoteCamera, csUser, csCall, csRoom, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteCameraStateUpdated))]
#endif
		private static void OnRemoteCameraStateUpdatedDelegate(IntPtr e, IntPtr remoteCamera, IntPtr user, IntPtr call, IntPtr room, IntPtr participant, Device.DeviceState state){
			RemoteCamera csRemoteCamera = null;
			if(remoteCamera != IntPtr.Zero){
				if(RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera) == IntPtr.Zero)
					csRemoteCamera = new RemoteCamera(remoteCamera);
				else{
					GCHandle objHandle = (GCHandle)RemoteCamera.VidyoRemoteCameraGetUserDataNative(remoteCamera);
					csRemoteCamera = (RemoteCamera)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteCameraEventListener != null)
				_mIRegisterRemoteCameraEventListener.OnRemoteCameraStateUpdated(csRemoteCamera, csUser, csCall, csRoom, csParticipant, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneAdded))]
#endif
		private static void OnRemoteMicrophoneAddedDelegate(IntPtr e, IntPtr remoteMicrophone, IntPtr user, IntPtr call, IntPtr room, IntPtr participant){
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteMicrophoneEventListener != null)
				_mIRegisterRemoteMicrophoneEventListener.OnRemoteMicrophoneAdded(csRemoteMicrophone, csUser, csCall, csRoom, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneEnergy))]
#endif
		private static void OnRemoteMicrophoneEnergyDelegate(IntPtr e, IntPtr remoteMicrophone, IntPtr participant, int audioEnergy){
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteMicrophoneEnergyListener != null)
				_mIRegisterRemoteMicrophoneEnergyListener.OnRemoteMicrophoneEnergy(csRemoteMicrophone, csParticipant, audioEnergy);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneFrame))]
#endif
		private static void OnRemoteMicrophoneFrameDelegate(IntPtr e, IntPtr remoteMicrophone, IntPtr participant, IntPtr audioFrame){
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			AudioFrame csAudioFrame = null;
			if(audioFrame != IntPtr.Zero){
				if(AudioFrame.VidyoAudioFrameGetUserDataNative(audioFrame) == IntPtr.Zero)
					csAudioFrame = new AudioFrame(audioFrame);
				else{
					GCHandle objHandle = (GCHandle)AudioFrame.VidyoAudioFrameGetUserDataNative(audioFrame);
					csAudioFrame = (AudioFrame)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteMicrophoneFrameListener != null)
				_mIRegisterRemoteMicrophoneFrameListener.OnRemoteMicrophoneFrame(csRemoteMicrophone, csParticipant, csAudioFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneRemoved))]
#endif
		private static void OnRemoteMicrophoneRemovedDelegate(IntPtr e, IntPtr remoteMicrophone, IntPtr user, IntPtr call, IntPtr room, IntPtr participant){
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteMicrophoneEventListener != null)
				_mIRegisterRemoteMicrophoneEventListener.OnRemoteMicrophoneRemoved(csRemoteMicrophone, csUser, csCall, csRoom, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteMicrophoneStateUpdated))]
#endif
		private static void OnRemoteMicrophoneStateUpdatedDelegate(IntPtr e, IntPtr remoteMicrophone, IntPtr user, IntPtr call, IntPtr room, IntPtr participant, Device.DeviceState state){
			RemoteMicrophone csRemoteMicrophone = null;
			if(remoteMicrophone != IntPtr.Zero){
				if(RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone) == IntPtr.Zero)
					csRemoteMicrophone = new RemoteMicrophone(remoteMicrophone);
				else{
					GCHandle objHandle = (GCHandle)RemoteMicrophone.VidyoRemoteMicrophoneGetUserDataNative(remoteMicrophone);
					csRemoteMicrophone = (RemoteMicrophone)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteMicrophoneEventListener != null)
				_mIRegisterRemoteMicrophoneEventListener.OnRemoteMicrophoneStateUpdated(csRemoteMicrophone, csUser, csCall, csRoom, csParticipant, state);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteRendererAdded))]
#endif
		private static void OnRemoteRendererAddedDelegate(IntPtr e, IntPtr remoteRenderer, IntPtr user, IntPtr call, IntPtr room){
			RemoteRenderer csRemoteRenderer = null;
			if(remoteRenderer != IntPtr.Zero){
				if(RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer) == IntPtr.Zero)
					csRemoteRenderer = new RemoteRenderer(remoteRenderer);
				else{
					GCHandle objHandle = (GCHandle)RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer);
					csRemoteRenderer = (RemoteRenderer)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteRendererEventListener != null)
				_mIRegisterRemoteRendererEventListener.OnRemoteRendererAdded(csRemoteRenderer, csUser, csCall, csRoom);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteRendererRemoved))]
#endif
		private static void OnRemoteRendererRemovedDelegate(IntPtr e, IntPtr remoteRenderer, IntPtr user, IntPtr call, IntPtr room){
			RemoteRenderer csRemoteRenderer = null;
			if(remoteRenderer != IntPtr.Zero){
				if(RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer) == IntPtr.Zero)
					csRemoteRenderer = new RemoteRenderer(remoteRenderer);
				else{
					GCHandle objHandle = (GCHandle)RemoteRenderer.VidyoRemoteRendererGetUserDataNative(remoteRenderer);
					csRemoteRenderer = (RemoteRenderer)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteRendererEventListener != null)
				_mIRegisterRemoteRendererEventListener.OnRemoteRendererRemoved(csRemoteRenderer, csUser, csCall, csRoom);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteSpeakerAdded))]
#endif
		private static void OnRemoteSpeakerAddedDelegate(IntPtr e, IntPtr remoteSpeaker, IntPtr user, IntPtr call, IntPtr room){
			RemoteSpeaker csRemoteSpeaker = null;
			if(remoteSpeaker != IntPtr.Zero){
				if(RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker) == IntPtr.Zero)
					csRemoteSpeaker = new RemoteSpeaker(remoteSpeaker);
				else{
					GCHandle objHandle = (GCHandle)RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker);
					csRemoteSpeaker = (RemoteSpeaker)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteSpeakerEventListener != null)
				_mIRegisterRemoteSpeakerEventListener.OnRemoteSpeakerAdded(csRemoteSpeaker, csUser, csCall, csRoom);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteSpeakerRemoved))]
#endif
		private static void OnRemoteSpeakerRemovedDelegate(IntPtr e, IntPtr remoteSpeaker, IntPtr user, IntPtr call, IntPtr room){
			RemoteSpeaker csRemoteSpeaker = null;
			if(remoteSpeaker != IntPtr.Zero){
				if(RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker) == IntPtr.Zero)
					csRemoteSpeaker = new RemoteSpeaker(remoteSpeaker);
				else{
					GCHandle objHandle = (GCHandle)RemoteSpeaker.VidyoRemoteSpeakerGetUserDataNative(remoteSpeaker);
					csRemoteSpeaker = (RemoteSpeaker)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteSpeakerEventListener != null)
				_mIRegisterRemoteSpeakerEventListener.OnRemoteSpeakerRemoved(csRemoteSpeaker, csUser, csCall, csRoom);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteWindowShareAdded))]
#endif
		private static void OnRemoteWindowShareAddedDelegate(IntPtr e, IntPtr remoteWindowShare, IntPtr user, IntPtr call, IntPtr room, IntPtr participant){
			RemoteWindowShare csRemoteWindowShare = null;
			if(remoteWindowShare != IntPtr.Zero){
				if(RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare) == IntPtr.Zero)
					csRemoteWindowShare = new RemoteWindowShare(remoteWindowShare);
				else{
					GCHandle objHandle = (GCHandle)RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare);
					csRemoteWindowShare = (RemoteWindowShare)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteWindowShareEventListener != null)
				_mIRegisterRemoteWindowShareEventListener.OnRemoteWindowShareAdded(csRemoteWindowShare, csUser, csCall, csRoom, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteWindowShareFrame))]
#endif
		private static void OnRemoteWindowShareFrameDelegate(IntPtr e, IntPtr remoteWindowShare, IntPtr participant, IntPtr videoFrame){
			RemoteWindowShare csRemoteWindowShare = null;
			if(remoteWindowShare != IntPtr.Zero){
				if(RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare) == IntPtr.Zero)
					csRemoteWindowShare = new RemoteWindowShare(remoteWindowShare);
				else{
					GCHandle objHandle = (GCHandle)RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare);
					csRemoteWindowShare = (RemoteWindowShare)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			VideoFrame csVideoFrame = null;
			if(videoFrame != IntPtr.Zero){
				if(VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame) == IntPtr.Zero)
					csVideoFrame = new VideoFrame(videoFrame);
				else{
					GCHandle objHandle = (GCHandle)VideoFrame.VidyoVideoFrameGetUserDataNative(videoFrame);
					csVideoFrame = (VideoFrame)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteWindowShareFrameListener != null)
				_mIRegisterRemoteWindowShareFrameListener.OnRemoteWindowShareFrame(csRemoteWindowShare, csParticipant, csVideoFrame);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteWindowShareRemoved))]
#endif
		private static void OnRemoteWindowShareRemovedDelegate(IntPtr e, IntPtr remoteWindowShare, IntPtr user, IntPtr call, IntPtr room, IntPtr participant){
			RemoteWindowShare csRemoteWindowShare = null;
			if(remoteWindowShare != IntPtr.Zero){
				if(RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare) == IntPtr.Zero)
					csRemoteWindowShare = new RemoteWindowShare(remoteWindowShare);
				else{
					GCHandle objHandle = (GCHandle)RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare);
					csRemoteWindowShare = (RemoteWindowShare)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteWindowShareEventListener != null)
				_mIRegisterRemoteWindowShareEventListener.OnRemoteWindowShareRemoved(csRemoteWindowShare, csUser, csCall, csRoom, csParticipant);
		}
#if __IOS__
[ObjCRuntime.MonoPInvokeCallback(typeof(OnRemoteWindowShareStateUpdated))]
#endif
		private static void OnRemoteWindowShareStateUpdatedDelegate(IntPtr e, IntPtr remoteWindowShare, IntPtr user, IntPtr call, IntPtr room, IntPtr participant, Device.DeviceState state){
			RemoteWindowShare csRemoteWindowShare = null;
			if(remoteWindowShare != IntPtr.Zero){
				if(RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare) == IntPtr.Zero)
					csRemoteWindowShare = new RemoteWindowShare(remoteWindowShare);
				else{
					GCHandle objHandle = (GCHandle)RemoteWindowShare.VidyoRemoteWindowShareGetUserDataNative(remoteWindowShare);
					csRemoteWindowShare = (RemoteWindowShare)objHandle.Target;
				}
			}
			User csUser = null;
			if(user != IntPtr.Zero){
				if(User.VidyoUserGetUserDataNative(user) == IntPtr.Zero)
					csUser = new User(user);
				else{
					GCHandle objHandle = (GCHandle)User.VidyoUserGetUserDataNative(user);
					csUser = (User)objHandle.Target;
				}
			}
			Call csCall = null;
			if(call != IntPtr.Zero){
				if(Call.VidyoCallGetUserDataNative(call) == IntPtr.Zero)
					csCall = new Call(call);
				else{
					GCHandle objHandle = (GCHandle)Call.VidyoCallGetUserDataNative(call);
					csCall = (Call)objHandle.Target;
				}
			}
			Room csRoom = null;
			if(room != IntPtr.Zero){
				if(Room.VidyoRoomGetUserDataNative(room) == IntPtr.Zero)
					csRoom = new Room(room);
				else{
					GCHandle objHandle = (GCHandle)Room.VidyoRoomGetUserDataNative(room);
					csRoom = (Room)objHandle.Target;
				}
			}
			Participant csParticipant = null;
			if(participant != IntPtr.Zero){
				if(Participant.VidyoParticipantGetUserDataNative(participant) == IntPtr.Zero)
					csParticipant = new Participant(participant);
				else{
					GCHandle objHandle = (GCHandle)Participant.VidyoParticipantGetUserDataNative(participant);
					csParticipant = (Participant)objHandle.Target;
				}
			}
			if(_mIRegisterRemoteWindowShareEventListener != null)
				_mIRegisterRemoteWindowShareEventListener.OnRemoteWindowShareStateUpdated(csRemoteWindowShare, csUser, csCall, csRoom, csParticipant, state);
		}
	};
}
