// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class ParticipantStats{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoParticipantStats reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetidNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetnameNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetremoteCameraStatsNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetremoteCameraStatsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoParticipantStatsFreeremoteCameraStatsArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetremoteMicrophoneStatsNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetremoteMicrophoneStatsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoParticipantStatsFreeremoteMicrophoneStatsArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetremoteWindowShareStatsNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetremoteWindowShareStatsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoParticipantStatsFreeremoteWindowShareStatsArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoParticipantStatsGetuserIdNative(IntPtr obj);

		public String id;
		public String name;
		public List<RemoteVideoSourceStats> remoteCameraStats;
		public List<RemoteMicrophoneStats> remoteMicrophoneStats;
		public List<RemoteVideoSourceStats> remoteWindowShareStats;
		public String userId;
		public ParticipantStats(IntPtr obj){
			objPtr = obj;

			List<RemoteVideoSourceStats> csRemoteCameraStats = new List<RemoteVideoSourceStats>();
			int nRemoteCameraStatsSize = 0;
			IntPtr nRemoteCameraStats = VidyoParticipantStatsGetremoteCameraStatsArrayNative(VidyoParticipantStatsGetremoteCameraStatsNative(objPtr), ref nRemoteCameraStatsSize);
			int nRemoteCameraStatsIndex = 0;
			while (nRemoteCameraStatsIndex < nRemoteCameraStatsSize) {
				RemoteVideoSourceStats csTremoteCameraStats = new RemoteVideoSourceStats(Marshal.ReadIntPtr(nRemoteCameraStats + (nRemoteCameraStatsIndex * Marshal.SizeOf(nRemoteCameraStats))));
				csRemoteCameraStats.Add(csTremoteCameraStats);
				nRemoteCameraStatsIndex++;
			}

			List<RemoteMicrophoneStats> csRemoteMicrophoneStats = new List<RemoteMicrophoneStats>();
			int nRemoteMicrophoneStatsSize = 0;
			IntPtr nRemoteMicrophoneStats = VidyoParticipantStatsGetremoteMicrophoneStatsArrayNative(VidyoParticipantStatsGetremoteMicrophoneStatsNative(objPtr), ref nRemoteMicrophoneStatsSize);
			int nRemoteMicrophoneStatsIndex = 0;
			while (nRemoteMicrophoneStatsIndex < nRemoteMicrophoneStatsSize) {
				RemoteMicrophoneStats csTremoteMicrophoneStats = new RemoteMicrophoneStats(Marshal.ReadIntPtr(nRemoteMicrophoneStats + (nRemoteMicrophoneStatsIndex * Marshal.SizeOf(nRemoteMicrophoneStats))));
				csRemoteMicrophoneStats.Add(csTremoteMicrophoneStats);
				nRemoteMicrophoneStatsIndex++;
			}

			List<RemoteVideoSourceStats> csRemoteWindowShareStats = new List<RemoteVideoSourceStats>();
			int nRemoteWindowShareStatsSize = 0;
			IntPtr nRemoteWindowShareStats = VidyoParticipantStatsGetremoteWindowShareStatsArrayNative(VidyoParticipantStatsGetremoteWindowShareStatsNative(objPtr), ref nRemoteWindowShareStatsSize);
			int nRemoteWindowShareStatsIndex = 0;
			while (nRemoteWindowShareStatsIndex < nRemoteWindowShareStatsSize) {
				RemoteVideoSourceStats csTremoteWindowShareStats = new RemoteVideoSourceStats(Marshal.ReadIntPtr(nRemoteWindowShareStats + (nRemoteWindowShareStatsIndex * Marshal.SizeOf(nRemoteWindowShareStats))));
				csRemoteWindowShareStats.Add(csTremoteWindowShareStats);
				nRemoteWindowShareStatsIndex++;
			}

			id = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoParticipantStatsGetidNative(objPtr));
			name = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoParticipantStatsGetnameNative(objPtr));
			remoteCameraStats = csRemoteCameraStats;
			remoteMicrophoneStats = csRemoteMicrophoneStats;
			remoteWindowShareStats = csRemoteWindowShareStats;
			userId = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoParticipantStatsGetuserIdNative(objPtr));
			VidyoParticipantStatsFreeremoteWindowShareStatsArrayNative(nRemoteWindowShareStats, nRemoteWindowShareStatsSize);
			VidyoParticipantStatsFreeremoteMicrophoneStatsArrayNative(nRemoteMicrophoneStats, nRemoteMicrophoneStatsSize);
			VidyoParticipantStatsFreeremoteCameraStatsArrayNative(nRemoteCameraStats, nRemoteCameraStatsSize);
		}
	};
}
