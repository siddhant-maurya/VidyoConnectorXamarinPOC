// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class LocalVideoSourceStats{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoLocalVideoSourceStats reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern MediaFormat VidyoLocalVideoSourceStatsGetformatNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern ulong VidyoLocalVideoSourceStatsGetframeIntervalMeasuredNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern ulong VidyoLocalVideoSourceStatsGetframeIntervalSetNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern ulong VidyoLocalVideoSourceStatsGetheightNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalVideoSourceStatsGetidNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalVideoSourceStatsGetlocalRendererStreamsNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalVideoSourceStatsGetlocalRendererStreamsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalVideoSourceStatsFreelocalRendererStreamsArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalVideoSourceStatsGetnameNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalVideoSourceStatsGetremoteRendererStreamsNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoLocalVideoSourceStatsGetremoteRendererStreamsArrayNative(IntPtr obj, ref int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoLocalVideoSourceStatsFreeremoteRendererStreamsArrayNative(IntPtr obj, int size);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern ulong VidyoLocalVideoSourceStatsGettargetBitRateNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern uint VidyoLocalVideoSourceStatsGettotalFramesNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern ulong VidyoLocalVideoSourceStatsGetwidthNative(IntPtr obj);

		public MediaFormat format;
		public ulong frameIntervalMeasured;
		public ulong frameIntervalSet;
		public ulong height;
		public String id;
		public List<LocalRendererStreamStats> localRendererStreams;
		public String name;
		public List<RemoteRendererStreamStats> remoteRendererStreams;
		public ulong targetBitRate;
		public uint totalFrames;
		public ulong width;
		public LocalVideoSourceStats(IntPtr obj){
			objPtr = obj;

			List<LocalRendererStreamStats> csLocalRendererStreams = new List<LocalRendererStreamStats>();
			int nLocalRendererStreamsSize = 0;
			IntPtr nLocalRendererStreams = VidyoLocalVideoSourceStatsGetlocalRendererStreamsArrayNative(VidyoLocalVideoSourceStatsGetlocalRendererStreamsNative(objPtr), ref nLocalRendererStreamsSize);
			int nLocalRendererStreamsIndex = 0;
			while (nLocalRendererStreamsIndex < nLocalRendererStreamsSize) {
				LocalRendererStreamStats csTlocalRendererStreams = new LocalRendererStreamStats(Marshal.ReadIntPtr(nLocalRendererStreams + (nLocalRendererStreamsIndex * Marshal.SizeOf(nLocalRendererStreams))));
				csLocalRendererStreams.Add(csTlocalRendererStreams);
				nLocalRendererStreamsIndex++;
			}

			List<RemoteRendererStreamStats> csRemoteRendererStreams = new List<RemoteRendererStreamStats>();
			int nRemoteRendererStreamsSize = 0;
			IntPtr nRemoteRendererStreams = VidyoLocalVideoSourceStatsGetremoteRendererStreamsArrayNative(VidyoLocalVideoSourceStatsGetremoteRendererStreamsNative(objPtr), ref nRemoteRendererStreamsSize);
			int nRemoteRendererStreamsIndex = 0;
			while (nRemoteRendererStreamsIndex < nRemoteRendererStreamsSize) {
				RemoteRendererStreamStats csTremoteRendererStreams = new RemoteRendererStreamStats(Marshal.ReadIntPtr(nRemoteRendererStreams + (nRemoteRendererStreamsIndex * Marshal.SizeOf(nRemoteRendererStreams))));
				csRemoteRendererStreams.Add(csTremoteRendererStreams);
				nRemoteRendererStreamsIndex++;
			}

			format = VidyoLocalVideoSourceStatsGetformatNative(objPtr);
			frameIntervalMeasured = VidyoLocalVideoSourceStatsGetframeIntervalMeasuredNative(objPtr);
			frameIntervalSet = VidyoLocalVideoSourceStatsGetframeIntervalSetNative(objPtr);
			height = VidyoLocalVideoSourceStatsGetheightNative(objPtr);
			id = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoLocalVideoSourceStatsGetidNative(objPtr));
			localRendererStreams = csLocalRendererStreams;
			name = (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(VidyoLocalVideoSourceStatsGetnameNative(objPtr));
			remoteRendererStreams = csRemoteRendererStreams;
			targetBitRate = VidyoLocalVideoSourceStatsGettargetBitRateNative(objPtr);
			totalFrames = VidyoLocalVideoSourceStatsGettotalFramesNative(objPtr);
			width = VidyoLocalVideoSourceStatsGetwidthNative(objPtr);
			VidyoLocalVideoSourceStatsFreeremoteRendererStreamsArrayNative(nRemoteRendererStreams, nRemoteRendererStreamsSize);
			VidyoLocalVideoSourceStatsFreelocalRendererStreamsArrayNative(nLocalRendererStreams, nLocalRendererStreamsSize);
		}
	};
}
