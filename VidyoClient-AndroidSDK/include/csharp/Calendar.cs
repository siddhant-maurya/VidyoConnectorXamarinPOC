// DO NOT EDIT! This is an autogenerated file. All changes will be
// overwritten!

//	Copyright (c) 2016 Vidyo, Inc. All rights reserved.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;
using System.Runtime.InteropServices;

namespace VidyoClient
{
	public class Calendar{
#if __IOS__
		const string importLib = "__Internal";
#else
		const string importLib = "libVidyoClient";
#endif
		private IntPtr objPtr; // opaque VidyoCalendar reference.
		public IntPtr GetObjectPtr(){
			return objPtr;
		}
		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarConnectNative(IntPtr c, IntPtr connProperties);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoCalendarConstructCopyNative(IntPtr other);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarCreateMeetingWithIdNative(IntPtr c, IntPtr id, IntPtr feedback, IntPtr createToken);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern void VidyoCalendarDestructNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarDisconnectNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarGetCapabilitiesNative(IntPtr c, IntPtr requestedCapabilities);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoCalendarGetIdNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern CalendarState VidyoCalendarGetServiceStateNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern IntPtr VidyoCalendarGetServiceTypeNative(IntPtr c);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I4)]
		private static extern MeetingSearchResult VidyoCalendarSearchMeetingsNative(IntPtr c, IntPtr searchText, IntPtr beginDateTime, IntPtr endDateTime, uint index, uint pageSize);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarSearchMeetingsByDayNative(IntPtr c, uint year, uint month, uint day, IntPtr createToken);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		private static extern Boolean VidyoCalendarSetSingleSignOnNative(IntPtr c, Boolean setSingleSignOn);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern IntPtr VidyoCalendarGetUserDataNative(IntPtr obj);

		[DllImport(importLib, CallingConvention = CallingConvention.Cdecl)]
		public static extern void VidyoCalendarSetUserDataNative(IntPtr obj, IntPtr userData);

		public Calendar(IntPtr other){
			objPtr = VidyoCalendarConstructCopyNative(other);
			VidyoCalendarSetUserDataNative(objPtr, GCHandle.ToIntPtr(GCHandle.Alloc(this, GCHandleType.Weak)));
		}
		~Calendar(){
			if(objPtr != IntPtr.Zero){
				VidyoCalendarSetUserDataNative(objPtr, IntPtr.Zero);
				VidyoCalendarDestructNative(objPtr);
			}
		}
		public Boolean Connect(List<CalendarConnProps> connProperties){

			IntPtr nConnProperties = IntPtr.Zero;

			Boolean ret = VidyoCalendarConnectNative(objPtr, nConnProperties);

			return ret;
		}
		public Boolean CreateMeetingWithId(String id, MeetingFeedback feedback, String createToken){

			IntPtr nId = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(id ?? string.Empty);
			IntPtr nCreateToken = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(createToken ?? string.Empty);
			Boolean ret = VidyoCalendarCreateMeetingWithIdNative(objPtr, nId, (feedback != null) ? feedback.GetObjectPtr():IntPtr.Zero, nCreateToken);
			Marshal.FreeHGlobal(nCreateToken);
			Marshal.FreeHGlobal(nId);

			return ret;
		}
		public Boolean Disconnect(){

			Boolean ret = VidyoCalendarDisconnectNative(objPtr);

			return ret;
		}
		public Boolean GetCapabilities(List<CalendarCapabilityKey> requestedCapabilities){

			IntPtr nRequestedCapabilities = IntPtr.Zero;

			Boolean ret = VidyoCalendarGetCapabilitiesNative(objPtr, nRequestedCapabilities);

			return ret;
		}
		public String GetId(){

			IntPtr ret = VidyoCalendarGetIdNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public CalendarState GetServiceState(){

			CalendarState ret = VidyoCalendarGetServiceStateNative(objPtr);

			return ret;
		}
		public String GetServiceType(){

			IntPtr ret = VidyoCalendarGetServiceTypeNative(objPtr);

			return (string)MarshalPtrToUtf8.GetInstance().MarshalNativeToManaged(ret);
		}
		public MeetingSearchResult SearchMeetings(String searchText, String beginDateTime, String endDateTime, uint index, uint pageSize){

			IntPtr nSearchText = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(searchText ?? string.Empty);
			IntPtr nBeginDateTime = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(beginDateTime ?? string.Empty);
			IntPtr nEndDateTime = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(endDateTime ?? string.Empty);
			MeetingSearchResult ret = VidyoCalendarSearchMeetingsNative(objPtr, nSearchText, nBeginDateTime, nEndDateTime, index, pageSize);
			Marshal.FreeHGlobal(nEndDateTime);
			Marshal.FreeHGlobal(nBeginDateTime);
			Marshal.FreeHGlobal(nSearchText);

			return ret;
		}
		public Boolean SearchMeetingsByDay(uint year, uint month, uint day, String createToken){

			IntPtr nCreateToken = MarshalPtrToUtf8.GetInstance().MarshalManagedToNative(createToken ?? string.Empty);
			Boolean ret = VidyoCalendarSearchMeetingsByDayNative(objPtr, year, month, day, nCreateToken);
			Marshal.FreeHGlobal(nCreateToken);

			return ret;
		}
		public Boolean SetSingleSignOn(Boolean setSingleSignOn){

			Boolean ret = VidyoCalendarSetSingleSignOnNative(objPtr, setSingleSignOn);

			return ret;
		}
	};
}
